{"version":3,"sources":["./node_modules/angularx-social-login/angularx-social-login.js","./src/app/auth/forgot-password/forgot-password.component.html","./src/app/auth/login/login.component.html","./src/app/auth/signup/signup.component.html","./src/app/auth/update-phone/update-phone.component.html","./src/app/auth/verify/verify.component.html","./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.module.ts","./src/app/auth/forgot-password/forgot-password.component.scss","./src/app/auth/forgot-password/forgot-password.component.ts","./src/app/auth/login/login.component.scss","./src/app/auth/login/login.component.ts","./src/app/auth/signup/signup.component.scss","./src/app/auth/signup/signup.component.ts","./src/app/auth/update-phone/update-phone.component.scss","./src/app/auth/update-phone/update-phone.component.ts","./src/app/auth/verify/verify.component.scss","./src/app/auth/verify/verify.component.ts","./src/app/shared/rest-api.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqD;AACC;AACP;;AAE/C;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA,8BAA8B,kDAAa;AAC3C,+BAA+B,oDAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA,oBAAoB,4DAAY;AAChC;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oDAAe;AAC9C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA,iCAAiC,iBAAiB;AAClD;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,iEAAiE,aAAa,2BAA2B;AACzG;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,qBAAqB;AACrB,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA,+BAA+B,EAAE;AACjC;AACA,+BAA+B,EAAE;AACjC;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA,+BAA+B,EAAE;AACjC;AACA,+BAA+B,EAAE;AACjC;AACA,+BAA+B,EAAE;AACjC;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA,iBAAiB;AACjB,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA,iCAAiC,gCAAgC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,yFAAyF,YAAY;AACrG,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,8CAA8C;AAC9C;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA,mCAAmC,EAAE;AACrC;AACA,6CAA6C,YAAY;AACzD,mCAAmC,EAAE;AACrC,oCAAoC;AACpC;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAo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","file":"auth-auth-module-es2015.js","sourcesContent":["import { Injectable, NgModule } from '@angular/core';\nimport { ReplaySubject, BehaviorSubject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass AuthServiceConfig {\n    /**\n     * @param {?} providers\n     */\n    constructor(providers) {\n        this.lazyLoad = false;\n        this.providers = new Map();\n        for (let i = 0; i < providers.length; i++) {\n            /** @type {?} */\n            let element = providers[i];\n            this.providers.set(element.id, element.provider);\n            this.lazyLoad = this.lazyLoad || element.lazyLoad;\n        }\n    }\n}\nclass AuthService {\n    /**\n     * @param {?} config\n     */\n    constructor(config) {\n        this._user = null;\n        this._authState = new ReplaySubject(1);\n        this._readyState = new BehaviorSubject([]);\n        this.initialized = false;\n        this.providers = config.providers;\n        if (!config.lazyLoad) {\n            this.initialize();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get authState() {\n        return this._authState.asObservable();\n    }\n    /**\n     * Provides an array of provider ID's as they become ready\n     * @return {?}\n     */\n    get readyState() {\n        return this._readyState.asObservable();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    initialize() {\n        this.initialized = true;\n        this.providers.forEach((/**\n         * @param {?} provider\n         * @param {?} key\n         * @return {?}\n         */\n        (provider, key) => {\n            provider.initialize().then((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                let readyProviders = this._readyState.getValue();\n                readyProviders.push(key);\n                this._readyState.next(readyProviders);\n                provider.getLoginStatus().then((/**\n                 * @param {?} user\n                 * @return {?}\n                 */\n                (user) => {\n                    user.provider = key;\n                    this._user = user;\n                    this._authState.next(user);\n                })).catch((/**\n                 * @param {?} err\n                 * @return {?}\n                 */\n                (err) => {\n                    this._authState.next(null);\n                }));\n            }));\n        }));\n    }\n    /**\n     * @param {?} providerId\n     * @param {?=} opt\n     * @return {?}\n     */\n    signIn(providerId, opt) {\n        if (!this.initialized) {\n            this.initialize();\n        }\n        return new Promise((/**\n         * @param {?} resolve\n         * @param {?} reject\n         * @return {?}\n         */\n        (resolve, reject) => {\n            /** @type {?} */\n            let providerObject = this.providers.get(providerId);\n            if (providerObject) {\n                providerObject.signIn(opt).then((/**\n                 * @param {?} user\n                 * @return {?}\n                 */\n                (user) => {\n                    user.provider = providerId;\n                    resolve(user);\n                    this._user = user;\n                    this._authState.next(user);\n                })).catch((/**\n                 * @param {?} err\n                 * @return {?}\n                 */\n                err => {\n                    reject(err);\n                }));\n            }\n            else {\n                reject(AuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n            }\n        }));\n    }\n    /**\n     * @param {?=} revoke\n     * @return {?}\n     */\n    signOut(revoke = false) {\n        if (!this.initialized) {\n            this.initialize();\n        }\n        return new Promise((/**\n         * @param {?} resolve\n         * @param {?} reject\n         * @return {?}\n         */\n        (resolve, reject) => {\n            if (!this._user) {\n                reject(AuthService.ERR_NOT_LOGGED_IN);\n            }\n            else {\n                /** @type {?} */\n                let providerId = this._user.provider;\n                /** @type {?} */\n                let providerObject = this.providers.get(providerId);\n                if (providerObject) {\n                    providerObject.signOut(revoke).then((/**\n                     * @return {?}\n                     */\n                    () => {\n                        resolve();\n                        this._user = null;\n                        this._authState.next(null);\n                    })).catch((/**\n                     * @param {?} err\n                     * @return {?}\n                     */\n                    (err) => {\n                        reject(err);\n                    }));\n                }\n                else {\n                    reject(AuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n                }\n            }\n        }));\n    }\n}\nAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';\nAuthService.ERR_NOT_LOGGED_IN = 'Not logged in';\nAuthService.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nAuthService.ctorParameters = () => [\n    { type: AuthServiceConfig }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass SocialLoginModule {\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    static initialize(config) {\n        return {\n            ngModule: SocialLoginModule,\n            providers: [\n                AuthService,\n                {\n                    provide: AuthServiceConfig,\n                    useValue: config\n                }\n            ]\n        };\n    }\n}\nSocialLoginModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule\n                ],\n                providers: [\n                    AuthService\n                ]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass SocialUser {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass BaseLoginProvider {\n    constructor() {\n        this._readyState = new BehaviorSubject(false);\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    onReady() {\n        return new Promise((/**\n         * @param {?} resolve\n         * @param {?} reject\n         * @return {?}\n         */\n        (resolve, reject) => {\n            this._readyState.subscribe((/**\n             * @param {?} isReady\n             * @return {?}\n             */\n            (isReady) => {\n                if (isReady) {\n                    resolve();\n                }\n            }));\n        }));\n    }\n    /**\n     * @param {?} id\n     * @param {?} src\n     * @param {?} onload\n     * @param {?=} async\n     * @param {?=} inner_text_content\n     * @return {?}\n     */\n    loadScript(id, src, onload, async = true, inner_text_content = '') {\n        // get document if platform is only browser\n        if (typeof document !== 'undefined' && !document.getElementById(id)) {\n            /** @type {?} */\n            let signInJS = document.createElement('script');\n            signInJS.async = async;\n            signInJS.src = src;\n            signInJS.onload = onload;\n            /*\n            if (inner_text_content) // LinkedIn\n                signInJS.text = inner_text_content;\n            */\n            document.head.appendChild(signInJS);\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass GoogleLoginProvider extends BaseLoginProvider {\n    /**\n     * @param {?} clientId\n     * @param {?=} opt\n     */\n    constructor(clientId, opt = { scope: 'email' }) {\n        super();\n        this.clientId = clientId;\n        this.opt = opt;\n    }\n    /**\n     * @return {?}\n     */\n    initialize() {\n        return new Promise((/**\n         * @param {?} resolve\n         * @param {?} reject\n         * @return {?}\n         */\n        (resolve, reject) => {\n            this.loadScript(GoogleLoginProvider.PROVIDER_ID, 'https://apis.google.com/js/platform.js', (/**\n             * @return {?}\n             */\n            () => {\n                gapi.load('auth2', (/**\n                 * @return {?}\n                 */\n                () => {\n                    this.auth2 = gapi.auth2.init(Object.assign({}, this.opt, { client_id: this.clientId }));\n                    this.auth2.then((/**\n                     * @return {?}\n                     */\n                    () => {\n                        this._readyState.next(true);\n                        resolve();\n                    })).catch((/**\n                     * @param {?} err\n                     * @return {?}\n                     */\n                    (err) => {\n                        reject(err);\n                    }));\n                }));\n            }));\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    getLoginStatus() {\n        return new Promise((/**\n         * @param {?} resolve\n         * @param {?} reject\n         * @return {?}\n         */\n        (resolve, reject) => {\n            this.onReady().then((/**\n             * @return {?}\n             */\n            () => {\n                if (this.auth2.isSignedIn.get()) {\n                    /** @type {?} */\n                    let user = new SocialUser();\n                    /** @type {?} */\n                    let profile = this.auth2.currentUser.get().getBasicProfile();\n                    /** @type {?} */\n                    let token = this.auth2.currentUser.get().getAuthResponse(true).access_token;\n                    /** @type {?} */\n                    let backendToken = this.auth2.currentUser.get().getAuthResponse(true).id_token;\n                    user.id = profile.getId();\n                    user.name = profile.getName();\n                    user.email = profile.getEmail();\n                    user.photoUrl = profile.getImageUrl();\n                    user.firstName = profile.getGivenName();\n                    user.lastName = profile.getFamilyName();\n                    user.authToken = token;\n                    user.idToken = backendToken;\n                    resolve(user);\n                }\n                else {\n                    reject('No user is currently logged in.');\n                }\n            }));\n        }));\n    }\n    /**\n     * @param {?=} opt\n     * @return {?}\n     */\n    signIn(opt) {\n        return new Promise((/**\n         * @param {?} resolve\n         * @param {?} reject\n         * @return {?}\n         */\n        (resolve, reject) => {\n            this.onReady().then((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const offlineAccess = (opt && opt.offline_access) || (this.opt && this.opt.offline_access);\n                /** @type {?} */\n                let promise = !offlineAccess ? this.auth2.signIn(opt) : this.auth2.grantOfflineAccess(opt);\n                promise.then((/**\n                 * @param {?} response\n                 * @return {?}\n                 */\n                (response) => {\n                    /** @type {?} */\n                    let user = new SocialUser();\n                    /** @type {?} */\n                    let profile = this.auth2.currentUser.get().getBasicProfile();\n                    /** @type {?} */\n                    let token = this.auth2.currentUser.get().getAuthResponse(true).access_token;\n                    /** @type {?} */\n                    let backendToken = this.auth2.currentUser.get().getAuthResponse(true).id_token;\n                    user.id = profile.getId();\n                    user.name = profile.getName();\n                    user.email = profile.getEmail();\n                    user.photoUrl = profile.getImageUrl();\n                    user.firstName = profile.getGivenName();\n                    user.lastName = profile.getFamilyName();\n                    user.authToken = token;\n                    user.idToken = backendToken;\n                    if (response && response.code) {\n                        user.authorizationCode = response.code;\n                    }\n                    resolve(user);\n                }), (/**\n                 * @param {?} closed\n                 * @return {?}\n                 */\n                (closed) => {\n                    reject('User cancelled login or did not fully authorize.');\n                })).catch((/**\n                 * @param {?} err\n                 * @return {?}\n                 */\n                (err) => {\n                    reject(err);\n                }));\n            }));\n        }));\n    }\n    /**\n     * @param {?=} revoke\n     * @return {?}\n     */\n    signOut(revoke) {\n        return new Promise((/**\n         * @param {?} resolve\n         * @param {?} reject\n         * @return {?}\n         */\n        (resolve, reject) => {\n            this.onReady().then((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                let signOutPromise;\n                if (revoke) {\n                    signOutPromise = this.auth2.disconnect();\n                }\n                else {\n                    signOutPromise = this.auth2.signOut();\n                }\n                signOutPromise.then((/**\n                 * @param {?} err\n                 * @return {?}\n                 */\n                (err) => {\n                    if (err) {\n                        reject(err);\n                    }\n                    else {\n                        resolve();\n                    }\n                })).catch((/**\n                 * @param {?} err\n                 * @return {?}\n                 */\n                (err) => {\n                    reject(err);\n                }));\n            }));\n        }));\n    }\n}\nGoogleLoginProvider.PROVIDER_ID = 'GOOGLE';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FacebookLoginProvider extends BaseLoginProvider {\n    /**\n     * @param {?} clientId\n     * @param {?=} opt\n     * @param {?=} locale\n     * @param {?=} fields\n     * @param {?=} version\n     */\n    constructor(clientId, opt = { scope: 'email,public_profile' }, locale = 'en_US', fields = 'name,email,picture,first_name,last_name', version = 'v4.0') {\n        super();\n        this.clientId = clientId;\n        this.opt = opt;\n        this.locale = locale;\n        this.fields = fields;\n        this.version = version;\n    }\n    /**\n     * @return {?}\n     */\n    initialize() {\n        return new Promise((/**\n         * @param {?} resolve\n         * @param {?} reject\n         * @return {?}\n         */\n        (resolve, reject) => {\n            this.loadScript(FacebookLoginProvider.PROVIDER_ID, `//connect.facebook.net/${this.locale}/sdk.js`, (/**\n             * @return {?}\n             */\n            () => {\n                FB.init({\n                    appId: this.clientId,\n                    autoLogAppEvents: true,\n                    cookie: true,\n                    xfbml: true,\n                    version: this.version\n                });\n                // FB.AppEvents.logPageView(); #FIX for #18\n                this._readyState.next(true);\n                resolve();\n            }));\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    getLoginStatus() {\n        return new Promise((/**\n         * @param {?} resolve\n         * @param {?} reject\n         * @return {?}\n         */\n        (resolve, reject) => {\n            this.onReady().then((/**\n             * @return {?}\n             */\n            () => {\n                FB.getLoginStatus((/**\n                 * @param {?} response\n                 * @return {?}\n                 */\n                (response) => {\n                    if (response.status === 'connected') {\n                        /** @type {?} */\n                        let authResponse = response.authResponse;\n                        FB.api(`/me?fields=${this.fields}`, (/**\n                         * @param {?} fbUser\n                         * @return {?}\n                         */\n                        (fbUser) => {\n                            /** @type {?} */\n                            let user = new SocialUser();\n                            user.id = fbUser.id;\n                            user.name = fbUser.name;\n                            user.email = fbUser.email;\n                            user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal';\n                            user.firstName = fbUser.first_name;\n                            user.lastName = fbUser.last_name;\n                            user.authToken = authResponse.accessToken;\n                            user.facebook = fbUser;\n                            resolve(user);\n                        }));\n                    }\n                    else {\n                        reject('No user is currently logged in.');\n                    }\n                }));\n            }));\n        }));\n    }\n    /**\n     * @param {?=} opt\n     * @return {?}\n     */\n    signIn(opt) {\n        return new Promise((/**\n         * @param {?} resolve\n         * @param {?} reject\n         * @return {?}\n         */\n        (resolve, reject) => {\n            this.onReady().then((/**\n             * @return {?}\n             */\n            () => {\n                FB.login((/**\n                 * @param {?} response\n                 * @return {?}\n                 */\n                (response) => {\n                    if (response.authResponse) {\n                        /** @type {?} */\n                        let authResponse = response.authResponse;\n                        FB.api(`/me?fields=${this.fields}`, (/**\n                         * @param {?} fbUser\n                         * @return {?}\n                         */\n                        (fbUser) => {\n                            /** @type {?} */\n                            let user = new SocialUser();\n                            user.id = fbUser.id;\n                            user.name = fbUser.name;\n                            user.email = fbUser.email;\n                            user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal';\n                            user.firstName = fbUser.first_name;\n                            user.lastName = fbUser.last_name;\n                            user.authToken = authResponse.accessToken;\n                            user.facebook = fbUser;\n                            resolve(user);\n                        }));\n                    }\n                    else {\n                        reject('User cancelled login or did not fully authorize.');\n                    }\n                }), this.opt);\n            }));\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    signOut() {\n        return new Promise((/**\n         * @param {?} resolve\n         * @param {?} reject\n         * @return {?}\n         */\n        (resolve, reject) => {\n            this.onReady().then((/**\n             * @return {?}\n             */\n            () => {\n                FB.logout((/**\n                 * @param {?} response\n                 * @return {?}\n                 */\n                (response) => {\n                    resolve();\n                }));\n            }));\n        }));\n    }\n}\nFacebookLoginProvider.PROVIDER_ID = 'FACEBOOK';\n\nexport { AuthService, AuthServiceConfig, FacebookLoginProvider, GoogleLoginProvider, SocialLoginModule, SocialUser, BaseLoginProvider as ɵa };\n//# sourceMappingURL=angularx-social-login.js.map\n","export default \"<div class=\\\"auth-header\\\">\\n    <div class=\\\"header-inner\\\">\\n        <img src=\\\"assets/img/logo.png\\\" routerLink=\\\"/\\\">\\n        <button mat-stroked-button routerLink=\\\"/auth/signup\\\">Sign up</button>\\n    </div>\\n</div>\\n\\n<section class=\\\"auth-wrapper\\\">\\n    <div class=\\\"container\\\">\\n        <div class=\\\"row justify-content-md-center align-items-center\\\">\\n            <div class=\\\"col-lg-6\\\">\\n                <div class=\\\"auth-heading\\\">\\n                    <h1>Forgot Password</h1>\\n                    <p>You will get reset password link in your email</p>\\n                </div>\\n                <div class=\\\"auth-outer\\\">\\n                    <form [formGroup]=\\\"forgotPasswordForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n                        <mat-form-field appearance=\\\"outline\\\">\\n                            <mat-label>Email ID</mat-label>\\n                            <input matInput formControlName=\\\"email\\\" placeholder=\\\"Enter your Email ID\\\" required>\\n                            <mat-icon matSuffix>email</mat-icon>\\n                            <mat-error *ngIf=\\\"hasError('email', 'required')\\\">Email is required</mat-error>\\n                            <mat-error *ngIf=\\\"hasError('email', 'email')\\\">Email is not valid</mat-error>\\n                        </mat-form-field>\\n                        <button mat-raised-button class=\\\"login-button\\\" [disabled]=\\\"forgotPasswordForm.invalid\\\">Submit</button>\\n                    </form>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</section>\"","export default \"<div class=\\\"auth-header\\\">\\n    <div class=\\\"header-inner\\\">\\n        <img src=\\\"assets/img/logo.png\\\" routerLink=\\\"/\\\">\\n        <button mat-stroked-button routerLink=\\\"/auth/signup\\\">Sign up</button>\\n    </div>\\n</div>\\n<section class=\\\"auth-wrapper\\\">\\n    <div class=\\\"container\\\">\\n        <div class=\\\"row justify-content-md-center align-items-center\\\">\\n            <div class=\\\"col-lg-8\\\">\\n                <div class=\\\"auth-heading\\\">\\n                    <h1>Log In</h1>\\n                    <p>New to Shaale? <a href=\\\"#\\\" routerLink=\\\"/auth/signup\\\">Sign Up</a></p>\\n                </div>\\n                <div class=\\\"auth-outer\\\">\\n                    <div class=\\\"row justify-content-md-center align-items-center\\\">\\n                        <div class=\\\"col-md-6 form-section\\\">\\n                            <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n                                <mat-form-field appearance=\\\"outline\\\">\\n                                    <mat-label>Email ID</mat-label>\\n                                    <input matInput formControlName=\\\"email\\\" placeholder=\\\"Enter your Email ID\\\" required>\\n                                    <mat-icon matSuffix>sentiment_very_satisfied</mat-icon>\\n                                    <mat-error *ngIf=\\\"hasError('email', 'required')\\\">Email is required</mat-error>\\n                                    <mat-error *ngIf=\\\"hasError('email', 'email')\\\">Email is not valid</mat-error>\\n                                </mat-form-field>\\n                                <mat-form-field appearance=\\\"outline\\\">\\n                                    <mat-label>Password</mat-label>\\n                                    <input matInput placeholder=\\\"Enter your password\\\"\\n                                        [type]=\\\"hide ? 'password' : 'text'\\\" formControlName=\\\"password\\\" required>\\n                                    <mat-error *ngIf=\\\"hasError('password', 'required')\\\">Password is required</mat-error>\\n                                    <mat-error *ngIf=\\\"hasError('password', 'minlength')\\\">Password is not valid\\n                                    </mat-error>\\n                                    <mat-error *ngIf=\\\"hasError('password', 'pattern')\\\">Valid characters are A-Z a-z 0-9\\n                                        . _ -.</mat-error>\\n                                    <button mat-icon-button type=\\\"button\\\" matSuffix (click)=\\\"hide = !hide\\\"\\n                                        [attr.aria-label]=\\\"'Hide password'\\\" [attr.aria-pressed]=\\\"hide\\\">\\n                                        <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\n                                    </button>\\n                                </mat-form-field>\\n                                <p class=\\\"forgot-password\\\"><a routerLink=\\\"/auth/forgot-password\\\">Forgot password?</a></p>\\n                                <button mat-raised-button class=\\\"login-button\\\" [disabled]=\\\"loginForm.invalid\\\">Log\\n                                    in</button>\\n                            </form>\\n                        </div>\\n                        <div class=\\\"col-md-6 social-section\\\">\\n                            <button mat-raised-button class=\\\"google-login-button\\\" (click)=\\\"signInWithGoogle()\\\">\\n                                <img src=\\\"assets/img/icons/social-google.png\\\">\\n                                Continue with Google\\n                            </button>\\n                            <button mat-raised-button class=\\\"facebook-login-button\\\" (click)=\\\"signInWithFB()\\\">\\n                                <img src=\\\"assets/img/icons/social-facebook.png\\\">\\n                                Continue with Facebook\\n                            </button>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</section>\"","export default \"<div class=\\\"auth-header\\\">\\n    <div class=\\\"header-inner\\\">\\n        <img src=\\\"assets/img/logo.png\\\" routerLink=\\\"/\\\">\\n        <button mat-stroked-button routerLink=\\\"/auth/login\\\">Log in</button>\\n    </div>\\n</div>\\n<section class=\\\"auth-wrapper\\\">\\n    <div class=\\\"container\\\">\\n        <div class=\\\"row justify-content-md-center align-items-center\\\">\\n            <div class=\\\"col-lg-8\\\">\\n                <div class=\\\"auth-heading\\\">\\n                    <h1>Sign up</h1>\\n                    <p>Already have a Shaale account? <a href=\\\"#\\\" routerLink=\\\"/auth/login\\\">Log In</a></p>\\n                </div>\\n                <div class=\\\"auth-outer\\\">\\n                    <div class=\\\"row justify-content-md-center align-items-center\\\">\\n                        <div class=\\\"col-md-6 form-section\\\">\\n                            <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n                                <mat-form-field appearance=\\\"outline\\\">\\n                                    <mat-label>Name</mat-label>\\n                                    <input matInput formControlName=\\\"name\\\" placeholder=\\\"Enter your Name\\\" required>\\n                                    <mat-icon matSuffix>sentiment_very_satisfied</mat-icon>\\n                                    <mat-error *ngIf=\\\"hasError('name', 'required')\\\">Name is required</mat-error>\\n                                    <mat-error *ngIf=\\\"hasError('name', 'pattern')\\\">Name is not valid</mat-error>\\n                                </mat-form-field>\\n                                <mat-form-field appearance=\\\"outline\\\">\\n                                    <mat-label>Email ID</mat-label>\\n                                    <input matInput formControlName=\\\"email\\\" placeholder=\\\"Enter your Email ID\\\" required>\\n                                    <mat-icon matSuffix>email</mat-icon>\\n                                    <mat-error *ngIf=\\\"hasError('email', 'required')\\\">Email is required</mat-error>\\n                                    <mat-error *ngIf=\\\"hasError('email', 'email')\\\">Email is not valid</mat-error>\\n                                </mat-form-field>\\n                                <div class=\\\"mat-phone-field\\\">\\n                                    <ngx-intl-tel-input [cssClass]=\\\"'custom-phone-input'\\\"\\n                                        [preferredCountries]=\\\"preferredCountries\\\" [enableAutoCountrySelect]=\\\"false\\\"\\n                                        [enablePlaceholder]=\\\"true\\\" [searchCountryFlag]=\\\"true\\\"\\n                                        [searchCountryField]=\\\"[SearchCountryField.Iso2, SearchCountryField.Name]\\\"\\n                                        [selectFirstCountry]=\\\"false\\\" [selectedCountryISO]=\\\"CountryISO.India\\\"\\n                                        [maxLength]=\\\"15\\\" [tooltipField]=\\\"TooltipLabel.Name\\\" [phoneValidation]=\\\"true\\\"\\n                                        [separateDialCode]=\\\"separateDialCode\\\" name=\\\"phone\\\" formControlName=\\\"phone\\\">\\n                                    </ngx-intl-tel-input>\\n                                    <div *ngIf=\\\"registerForm.controls['phone'].touched\\\">\\n                                        <mat-error *ngIf=\\\"hasError('phone', 'required')\\\">Phone is required </mat-error>\\n                                        <mat-error *ngIf=\\\"hasError('phone', 'validatePhoneNumber')\\\">Phone is not valid\\n                                        </mat-error>\\n                                    </div>\\n                                </div>\\n                                <mat-form-field appearance=\\\"outline\\\">\\n                                    <mat-label>Password</mat-label>\\n                                    <input matInput formControlName=\\\"password\\\" placeholder=\\\"Enter your password\\\"\\n                                        [type]=\\\"hide ? 'password' : 'text'\\\" required>\\n                                    <button mat-icon-button matSuffix type=\\\"button\\\" (click)=\\\"hide = !hide\\\"\\n                                        [attr.aria-label]=\\\"'Hide password'\\\" [attr.aria-pressed]=\\\"hide\\\">\\n                                        <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\n                                    </button>\\n                                    <mat-error *ngIf=\\\"hasError('password', 'required')\\\">Password is required</mat-error>\\n                                    <mat-error *ngIf=\\\"hasError('password', 'minlength')\\\">Password is not valid\\n                                    </mat-error>\\n                                    <mat-error *ngIf=\\\"hasError('password', 'pattern')\\\">Valid characters are A-Z a-z 0-9\\n                                        . _ -.</mat-error>\\n                                </mat-form-field>\\n                                <button mat-raised-button class=\\\"login-button\\\" [disabled]=\\\"registerForm.invalid\\\">Sign\\n                                    up</button>\\n                            </form>\\n                        </div>\\n                        <div class=\\\"col-md-6 social-section\\\">\\n                            <button mat-raised-button class=\\\"google-login-button\\\" (click)=\\\"signInWithGoogle()\\\">\\n                                <img src=\\\"assets/img/icons/social-google.png\\\">\\n                                Continue with Google\\n                            </button>\\n                            <button mat-raised-button class=\\\"facebook-login-button\\\" (click)=\\\"signInWithFB()\\\">\\n                                <img src=\\\"assets/img/icons/social-facebook.png\\\">\\n                                Continue with Facebook\\n                            </button>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</section>\"","export default \"<div class=\\\"auth-header\\\">\\n    <div class=\\\"header-inner\\\">\\n        <img src=\\\"assets/img/logo.png\\\" routerLink=\\\"/\\\">\\n        <button mat-stroked-button routerLink=\\\"/auth/signup\\\">Sign up</button>\\n    </div>\\n</div>\\n\\n<section class=\\\"auth-wrapper\\\">\\n    <div class=\\\"container\\\">\\n        <div class=\\\"row justify-content-md-center align-items-center\\\">\\n            <div class=\\\"col-lg-6\\\">\\n                <div class=\\\"auth-heading\\\">\\n                    <h1>Update Phone Number</h1>\\n                    <p>New to Shaale? <a href=\\\"auth/signup\\\">Sign Up</a></p>\\n                </div>\\n                <div class=\\\"auth-outer\\\">\\n                    <form [formGroup]=\\\"updatePhoneForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n                        <div class=\\\"mat-phone-field\\\">\\n                            <ngx-intl-tel-input [cssClass]=\\\"'custom-phone-input'\\\"\\n                                [preferredCountries]=\\\"preferredCountries\\\" [enableAutoCountrySelect]=\\\"false\\\"\\n                                [enablePlaceholder]=\\\"true\\\" [searchCountryFlag]=\\\"true\\\"\\n                                [searchCountryField]=\\\"[SearchCountryField.Iso2, SearchCountryField.Name]\\\"\\n                                [selectFirstCountry]=\\\"false\\\" [selectedCountryISO]=\\\"CountryISO.India\\\" [maxLength]=\\\"15\\\"\\n                                [tooltipField]=\\\"TooltipLabel.Name\\\" [phoneValidation]=\\\"true\\\"\\n                                [separateDialCode]=\\\"separateDialCode\\\" name=\\\"phone\\\" formControlName=\\\"phone\\\">\\n                            </ngx-intl-tel-input>\\n                            <div *ngIf=\\\"updatePhoneForm.controls['phone'].touched\\\">\\n                                <mat-error *ngIf=\\\"hasError('phone', 'required')\\\">Phone is required </mat-error>\\n                                <mat-error *ngIf=\\\"hasError('phone', 'validatePhoneNumber')\\\">Phone is not valid\\n                                </mat-error>\\n                            </div>\\n                        </div>\\n                        <button mat-raised-button class=\\\"login-button\\\" [disabled]=\\\"updatePhoneForm.invalid\\\">Update</button>\\n                    </form>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</section>\"","export default \"<div class=\\\"auth-header\\\">\\n    <div class=\\\"header-inner\\\">\\n        <img src=\\\"assets/img/logo.png\\\" routerLink=\\\"/\\\">\\n        <button mat-stroked-button routerLink=\\\"/auth/signup\\\">Sign up</button>\\n    </div>\\n</div>\\n\\n<section class=\\\"auth-wrapper\\\">\\n    <div class=\\\"container\\\">\\n        <div class=\\\"row justify-content-md-center align-items-center\\\">\\n            <div class=\\\"col-lg-6\\\">\\n                <div class=\\\"auth-heading\\\">\\n                    <h1>Verify Phone Number</h1>\\n                    <p>Didn't receive OTP? <a>Resend</a></p>\\n                </div>\\n                <div class=\\\"auth-outer\\\">\\n                    <form [formGroup]=\\\"verifyForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n                        <mat-form-field appearance=\\\"outline\\\">\\n                            <mat-label>Enter OTP</mat-label>\\n                            <input matInput formControlName=\\\"otp\\\" placeholder=\\\"Enter OTP\\\" required>\\n                            <mat-icon matSuffix>verified_user</mat-icon>\\n                            <mat-error *ngIf=\\\"hasError('otp', 'required')\\\">OTP is required</mat-error>\\n                            <mat-error *ngIf=\\\"hasError('otp', 'minlength')\\\">OTP is not valid</mat-error>\\n                        </mat-form-field>\\n                        <button mat-raised-button class=\\\"login-button\\\" [disabled]=\\\"verifyForm.invalid\\\">Submit</button>\\n                    </form>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</section>\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\nimport { VerifyComponent } from './verify/verify.component';\nimport { UpdatePhoneComponent } from './update-phone/update-phone.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\n\n\nconst routes: Routes = [\n\n  {\n    path: '',\n    redirectTo: 'login',\n    pathMatch: 'full'\n  },\n  {\n    path: 'login',\n    component: LoginComponent,\n    data: { title: 'Login' }\n  },\n  {\n    path: 'signup',\n    component: SignupComponent,\n    data: { title: 'Signup' }\n  },\n  {\n    path: 'verify',\n    component: VerifyComponent,\n    data: { title: 'Verify' }\n  },\n  {\n    path: 'update-phone',\n    component: UpdatePhoneComponent,\n    data: { title: 'Update Phone' }\n  },\n  {\n    path: 'forgot-password',\n    component: ForgotPasswordComponent,\n    data: { title: 'Forgot Password' }\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../shared/shared.module';\n\nimport { NgxIntlTelInputModule } from 'ngx-intl-tel-input';\nimport { SocialLoginModule, AuthServiceConfig } from \"angularx-social-login\";\nimport { GoogleLoginProvider, FacebookLoginProvider } from \"angularx-social-login\";\n\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\nimport { UpdatePhoneComponent } from './update-phone/update-phone.component';\nimport { VerifyComponent } from './verify/verify.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\n\nconst config = new AuthServiceConfig([\n  {\n    id: GoogleLoginProvider.PROVIDER_ID,\n    provider: new GoogleLoginProvider(\"242880965663-qn8m5e9kfi2s88iegb6kbjmo7rna9ren.apps.googleusercontent.com\")\n  },\n  {\n    id: FacebookLoginProvider.PROVIDER_ID,\n    provider: new FacebookLoginProvider(\"483715322266021\")\n  }\n]);\n\nexport function provideConfig() {\n  return config;\n}\n\n\n@NgModule({\n  declarations: [LoginComponent, SignupComponent, UpdatePhoneComponent, VerifyComponent, ForgotPasswordComponent],\n  imports: [\n    CommonModule,\n\n    NgxIntlTelInputModule,\n    NgxIntlTelInputModule,\n    SocialLoginModule,\n    AuthRoutingModule,\n    SharedModule,\n  ],\n  providers: [\n    {\n      provide: AuthServiceConfig,\n      useFactory: provideConfig\n    }\n  ]\n})\nexport class AuthModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvZm9yZ290LXBhc3N3b3JkL2ZvcmdvdC1wYXNzd29yZC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { RestApiService } from 'src/app/shared/rest-api.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'shaale-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss']\n})\nexport class ForgotPasswordComponent implements OnInit {\n\n\n  forgotPasswordForm: FormGroup;\n\n\n  constructor(\n    private formBuilder: FormBuilder,\n    public restApi: RestApiService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n\n    this.forgotPasswordForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]]\n    });\n  }\n\n  public hasError = (controlName: string, errorName: string) => {\n    return this.forgotPasswordForm.controls[controlName].hasError(errorName);\n  }\n\n  onSubmit() {\n    console.log(this.forgotPasswordForm.value);\n    this.restApi.forgotPassword(this.forgotPasswordForm.value.email)\n      .subscribe(\n        (onSuccess: any) => {\n          console.log(onSuccess);\n          this.router.navigateByUrl('/auth/login');\n        },\n        (onError: any) => {\n          console.log(onError);\n        }\n      );\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvbG9naW4vbG9naW4uY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { RestApiService } from \"../../shared/rest-api.service\";\nimport { AuthService } from 'angularx-social-login';\nimport { SocialUser } from 'angularx-social-login';\nimport { GoogleLoginProvider, FacebookLoginProvider } from 'angularx-social-login';\nimport { authLogin, AppState } from '../../core/core.module';\nimport { Store, select } from '@ngrx/store';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'shaale-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm: FormGroup;\n\n  hide = true;\n\n  user: SocialUser;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    public restApi: RestApiService,\n    private authService: AuthService,\n    private store: Store<AppState>,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6), Validators.pattern('^[a-zA-Z0-9]*$')]]\n    });\n\n    this.authService.authState.subscribe((user) => {\n      this.user = user;\n      console.log(user);\n    });\n  }\n\n  public hasError = (controlName: string, errorName: string) => {\n    return this.loginForm.controls[controlName].hasError(errorName);\n  }\n\n  signInWithGoogle(): void {\n    this.authService.signIn(GoogleLoginProvider.PROVIDER_ID)\n      .then((response) => {\n        console.log(response);\n        let socialUser = {\n          provider: response.provider.toLowerCase(),\n          token: response.idToken,\n        }\n        console.log(socialUser);\n        this.submitSocialDetails(socialUser);\n      })\n      .catch(err => alert(err))\n  }\n\n  signInWithFB(): void {\n    this.authService.signIn(FacebookLoginProvider.PROVIDER_ID)\n      .then((response) => {\n        console.log(response);\n        let socialUser = {\n          provider: response.provider.toLowerCase(),\n          token: response.authToken,\n        }\n        console.log(socialUser);\n        this.submitSocialDetails(socialUser);\n      })\n      .catch(err => alert(err))\n  }\n\n\n  // login form submit\n  onSubmit() {\n    console.log(this.loginForm.value);\n    this.restApi.loginUser(this.loginForm.value)\n      .subscribe(\n        (onSuccess: any) => {\n          console.log(onSuccess);\n          localStorage.setItem(\"token\", onSuccess.token);\n          this.getUserInfo();\n        },\n        (onError: any) => {\n          console.log(onError);\n        }\n      );\n  }\n\n  // social login/signup\n  submitSocialDetails(socialData) {\n    this.restApi.loginUserSocial(socialData)\n    .subscribe(\n      (onSuccess: any) => {\n        console.log(onSuccess);\n        localStorage.setItem(\"token\", onSuccess.token);\n        this.getUserInfo();\n      },\n      (onError: any) => {\n        console.log(onError);\n      }\n    );\n  }\n\n  // Get user details\n  getUserInfo() {\n    this.restApi.getUserDetails()\n    .subscribe(\n      (onSuccess: any) => {\n        console.log(onSuccess);\n        if (onSuccess.isPhoneVerified == false) {\n          if ((onSuccess.phone == \"\") || (onSuccess.phone == null)) {\n            console.log(onSuccess.phone != \"\", onSuccess.phone != null);\n            this.router.navigateByUrl(\"/auth/update-phone\");\n          } else {\n            this.router.navigateByUrl(\"/auth/verify\");\n          }\n        } else {\n          this.store.dispatch(authLogin());\n          this.router.navigateByUrl(\"/home\");\n        }\n      },\n      (onError: any) => {\n        console.log(onError);\n      }\n    );\n  }\n\n  signOut(): void {\n    this.authService.signOut();\n  }\n\n  forgotPassword() {\n    console.log('Sent forgot password link to your email');\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvc2lnbnVwL3NpZ251cC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { SearchCountryField, TooltipLabel, CountryISO } from 'ngx-intl-tel-input';\nimport { RestApiService } from \"../../shared/rest-api.service\";\nimport { AuthService } from 'angularx-social-login';\nimport { SocialUser } from 'angularx-social-login';\nimport { GoogleLoginProvider, FacebookLoginProvider } from 'angularx-social-login';\nimport { authLogin, AppState, selectIsAuthenticated } from '../../core/core.module';\nimport { Store, select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'shaale-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss']\n})\nexport class SignupComponent implements OnInit {\n\n  registerForm: FormGroup;\n  separateDialCode = true;\n  SearchCountryField = SearchCountryField;\n  TooltipLabel = TooltipLabel;\n  CountryISO = CountryISO;\n  preferredCountries: CountryISO[] = [CountryISO.India];\n\n  changePreferredCountries() {\n    this.preferredCountries = [CountryISO.India];\n  }\n\n  hide = true;\n  user: SocialUser;\n  isAuthenticated$: Observable<any>;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    public restApi: RestApiService,\n    private authService: AuthService,\n    private store: Store<AppState>,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n\n    this.registerForm = this.formBuilder.group({\n      name: ['', [Validators.required, Validators.pattern('.*\\\\S.*[a-zA-z0-9 ]')]],\n      email: ['', [Validators.required, Validators.email]],\n      phone: ['', Validators.required],\n      password: ['', [Validators.required, Validators.minLength(6), Validators.pattern('^[a-zA-Z0-9]*$')]]\n    });\n    this.isAuthenticated$ = this.store.pipe(select(selectIsAuthenticated));\n  }\n\n  public hasError = (controlName: string, errorName: string) => {\n    return this.registerForm.controls[controlName].hasError(errorName);\n  }\n\n  signInWithGoogle(): void {\n    this.authService.signIn(GoogleLoginProvider.PROVIDER_ID)\n      .then((response) => {\n        console.log(response);\n        let socialUser = {\n          provider: response.provider.toLowerCase(),\n          token: response.idToken,\n        }\n        console.log(socialUser);\n        this.submitSocialDetails(socialUser);\n      })\n      .catch(err => alert(err))\n  }\n\n  signInWithFB(): void {\n    this.authService.signIn(FacebookLoginProvider.PROVIDER_ID)\n      .then((response) => {\n        console.log(response);\n        let socialUser = {\n          provider: response.provider.toLowerCase(),\n          token: response.authToken,\n        }\n        console.log(socialUser);\n        this.submitSocialDetails(socialUser);\n      })\n      .catch(err => alert(err))\n  }\n\n  // signup form submit\n  onSubmit() {\n    console.log(this.registerForm.value);\n    let phoneFormat = this.registerForm.value.phone.internationalNumber.replace(/[- )(]/g,'');\n    console.log(phoneFormat);\n    this.registerForm.value.name = this.registerForm.value.name.trim();\n    this.registerForm.value.phone = phoneFormat;\n    this.restApi.createUser(this.registerForm.value)\n      .subscribe(\n        (onSuccess: any) => {\n          console.log(onSuccess);\n          localStorage.setItem(\"token\", onSuccess.token);\n          this.getUserInfo();\n        },\n        (onError: any) => {\n          console.log(onError);\n        }\n      );\n  }\n\n  // social login/signup\n  submitSocialDetails(socialData) {\n    this.restApi.loginUserSocial(socialData)\n      .subscribe(\n        (onSuccess: any) => {\n          console.log(onSuccess);\n          localStorage.setItem(\"token\", onSuccess.token);\n          this.getUserInfo();\n        },\n        (onError: any) => {\n          console.log(onError);\n        }\n      );\n  }\n\n  // Get user details\n  getUserInfo() {\n    this.restApi.getUserDetails()\n    .subscribe(\n      (onSuccess: any) => {\n        console.log(onSuccess);\n        if (onSuccess.isPhoneVerified == false) {\n          if ((onSuccess.phone == \"\") || (onSuccess.phone == null)) {\n            console.log(onSuccess.phone != \"\", onSuccess.phone != null);\n            \n            this.router.navigateByUrl(\"/auth/update-phone\");\n          } else {\n            this.router.navigateByUrl(\"/auth/verify\");\n          }\n        } else {\n          this.store.dispatch(authLogin());\n          this.router.navigateByUrl(\"/home\");\n        }\n      },\n      (onError: any) => {\n        console.log(onError);\n      }\n    );\n  }\n\n\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvdXBkYXRlLXBob25lL3VwZGF0ZS1waG9uZS5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { SearchCountryField, TooltipLabel, CountryISO } from 'ngx-intl-tel-input';\nimport { RestApiService } from \"../../shared/rest-api.service\";\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'shaale-update-phone',\n  templateUrl: './update-phone.component.html',\n  styleUrls: ['./update-phone.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class UpdatePhoneComponent implements OnInit {\n\n  updatePhoneForm: FormGroup;\n  separateDialCode = true;\n  SearchCountryField = SearchCountryField;\n  TooltipLabel = TooltipLabel;\n  CountryISO = CountryISO;\n  preferredCountries: CountryISO[] = [CountryISO.India];\n\n  changePreferredCountries() {\n    this.preferredCountries = [CountryISO.India];\n  }\n\n  constructor(\n    private formBuilder: FormBuilder,\n    public restApi: RestApiService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n\n    this.updatePhoneForm = this.formBuilder.group({\n      phone: ['', Validators.required]\n    });\n  }\n\n  public hasError = (controlName: string, errorName: string) => {\n    return this.updatePhoneForm.controls[controlName].hasError(errorName);\n  }\n\n  onSubmit() {\n    console.log(this.updatePhoneForm.value);\n    // let phoneFormat = this.updatePhoneForm.value.phone.dialCode.concat('-', this.updatePhoneForm.value.phone.number);\n    let phoneFormat = this.updatePhoneForm.value.phone.internationalNumber.replace(/[- )(]/g,'');\n    console.log(phoneFormat);\n    this.updatePhoneForm.value.phone = phoneFormat;\n    this.restApi.updatePhone(this.updatePhoneForm.value).subscribe(\n      (onSuccess: any) => {\n        console.log(onSuccess);\n        this.router.navigateByUrl('/auth/verify');\n      },\n      (onError: any) => {\n        console.log(onError);\n      }\n    );\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvdmVyaWZ5L3ZlcmlmeS5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { RestApiService } from \"../../shared/rest-api.service\";\n\n@Component({\n  selector: 'shaale-verify',\n  templateUrl: './verify.component.html',\n  styleUrls: ['./verify.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class VerifyComponent implements OnInit {\n\n  verifyForm: FormGroup;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    public restApi: RestApiService,\n  ) { }\n\n  ngOnInit() {\n\n    this.verifyForm = this.formBuilder.group({\n      otp: ['', [Validators.required, Validators.minLength(4)]]\n    });\n  }\n\n  public hasError = (controlName: string, errorName: string) => {\n    return this.verifyForm.controls[controlName].hasError(errorName);\n  }\n\n  onSubmit() {\n    console.log(this.verifyForm.value);\n    this.restApi.verifyMobile(this.verifyForm.value).subscribe((data: {}) => {\n      console.log('data');\n    })\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class RestApiService {\n\n  // Define API\n  apiURL = environment.apiUrl;\n\n  // localToken = JSON.parse(localStorage.getItem(\"token\"));\n\n\n  constructor(private http: HttpClient) { }\n\n  /*========================================\n    CRUD Methods for consuming RESTful API\n  =========================================*/\n\n  /* ===========\n   All Post Method\n  ===================*/\n\n  // Http Options\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }\n\n  // HttpClient API for email signup\n  createUser(newUser) {\n    return this.http.post(this.apiURL + '/auth/signup/email', newUser, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  }\n\n  // HttpClient API for email Login\n  loginUser(newUser) {\n    return this.http.post(this.apiURL + '/auth/login/email', newUser, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  }\n\n  // HttpClient API for social login\n  loginUserSocial(socialUserDetails) {\n    return this.http.post(this.apiURL + '/auth/login/social/' + socialUserDetails.provider,\n      {\n        token: socialUserDetails.token\n      },\n      this.httpOptions\n    )\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  }\n\n  // HttpClient API for verify email\n  emailVerify(newUser) {\n    return this.http.post(this.apiURL + '/auth/verify/email', newUser, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  }\n\n  // HttpClient API for verify mobile\n  verifyMobile(newUser) {\n    return this.http.post(this.apiURL + '/auth/verify/mobile', newUser, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  }\n\n  // HttpClient API for send mobile otp\n  sendOtp(newUser) {\n    return this.http.post(this.apiURL + '/auth/verify/send-otp', newUser, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  }\n\n  // HttpClient API for send email verification\n  sendEmailVerification(newUser) {\n    return this.http.post(this.apiURL + '/auth/verify/send-otp', newUser, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  }\n\n  purchaseDetails(newUser) {\n    return this.http.post(this.apiURL + '/live/events/by-id/{eventID}/purchase', newUser, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  }\n\n  /* ===========\n  All Put Method\n  ===================*/\n\n  updatePhone(updateUserDetails) {\n    return this.http.post(this.apiURL + '/auth/me', updateUserDetails, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  }\n\n  updateIsValid(newUser) {\n    return this.http.put(this.apiURL + '/auth/me/sessions/watch/is-valid', newUser, this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  }\n\n\n  /* ===========\n  All Get Method\n  ===================*/\n\n  // HttpClient API for Forgot Password\n  forgotPassword(data) {\n    return this.http.get(this.apiURL + '/auth/me/forgot-password/' + data, this.httpOptions)\n    .pipe(\n      retry(1),\n      catchError(this.handleError)\n    )\n  }\n\n\n  // HttpClient API for User details\n  getUserDetails() {\n    return this.http.get(this.apiURL + '/auth/me', this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  }\n\n  // HttpClient API for Sessions\n  getSessions() {\n    return this.http.get(this.apiURL + '/auth/me/sessions', this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  }\n\n  // HttpClient API for Sessions with id\n  getSessionsWIthID() {\n    return this.http.get(this.apiURL + '/auth/me/sessions/{sessionId}', this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  }\n\n  getIsValid() {\n    return this.http.get(this.apiURL + '/auth/me/sessions/watch/is-valid', this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  }\n\n  getLiveEvents() {\n    return this.http.get(this.apiURL + '/live/events', this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  }\n\n  getLiveEventDetails() {\n    return this.http.get(this.apiURL + '/live/events/by-slug/{eventSlug}', this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  }\n\n  getLiveEventVideo() {\n    return this.http.get(this.apiURL + '/live/events/by-id/{eventID}/video', this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  }\n\n  getCouponCode() {\n    return this.http.get(this.apiURL + '/live/events/by-id/{eventID}/coupons/{couponCode}', this.httpOptions)\n      .pipe(\n        retry(1),\n        catchError(this.handleError)\n      )\n  }\n\n\n  // Error handling \n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(errorMessage);\n  }\n\n}\n"],"sourceRoot":"webpack:///"}