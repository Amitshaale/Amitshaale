{"version":3,"sources":["learn-learn-module-es5.js","webpack:///node_modules/ngx-star-rating/fesm2015/ngx-star-rating.js","webpack:///src/app/products/learn/course-video/chapters/chapters.component.html","webpack:///src/app/products/learn/course-video/course-video.component.html","webpack:///src/app/products/learn/course-video/faq/faq.component.html","webpack:///src/app/products/learn/course-video/feeds/feeds.component.html","webpack:///src/app/products/learn/course-video/files/files.component.html","webpack:///src/app/products/learn/course-video/overview/overview.component.html","webpack:///src/app/products/learn/course/course.component.html","webpack:///src/app/products/learn/learn/learn.component.html","webpack:///src/app/products/learn/course-video/chapters/chapters.component.scss","webpack:///src/app/products/learn/course-video/chapters/chapters.component.ts","webpack:///src/app/products/learn/course-video/course-video.component.scss","webpack:///src/app/products/learn/course-video/course-video.component.ts","webpack:///src/app/products/learn/course-video/faq/faq.component.scss","webpack:///src/app/products/learn/course-video/faq/faq.component.ts","webpack:///src/app/products/learn/course-video/feeds/feeds.component.scss","webpack:///src/app/products/learn/course-video/feeds/feeds.component.ts","webpack:///src/app/products/learn/course-video/files/files.component.scss","webpack:///src/app/products/learn/course-video/files/files.component.ts","webpack:///src/app/products/learn/course-video/overview/overview.component.scss","webpack:///src/app/products/learn/course-video/overview/overview.component.ts","webpack:///src/app/products/learn/course/course.component.scss","webpack:///src/app/products/learn/course/course.component.ts","webpack:///src/app/products/learn/learn-routing.module.ts","webpack:///src/app/products/learn/learn.module.ts","webpack:///src/app/products/learn/learn/learn.component.scss","webpack:///src/app/products/learn/learn/learn.component.ts"],"names":[],"mappings":"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","file":"x","sourcesContent":["(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[\"learn-learn-module\"],{\n\n/***/ \"./node_modules/ngx-star-rating/fesm2015/ngx-star-rating.js\":\n/*!******************************************************************!*\\\n  !*** ./node_modules/ngx-star-rating/fesm2015/ngx-star-rating.js ***!\n  \\******************************************************************/\n/*! exports provided: NgxStarRatingComponent, NgxStarRatingModule, NgxStarRatingService */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NgxStarRatingComponent\", function() { return NgxStarRatingComponent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NgxStarRatingModule\", function() { return NgxStarRatingModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NgxStarRatingService\", function() { return NgxStarRatingService; });\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ \"./node_modules/@angular/forms/fesm2015/forms.js\");\n/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ \"./node_modules/@angular/common/fesm2015/common.js\");\n\n\n\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxStarRatingService {\r\n    constructor() { }\r\n}\r\nNgxStarRatingService.decorators = [\r\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Injectable\"], args: [{\r\n                providedIn: 'root'\r\n            },] }\r\n];\r\n/** @nocollapse */\r\nNgxStarRatingService.ctorParameters = () => [];\r\n/** @nocollapse */ NgxStarRatingService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ɵɵdefineInjectable\"])({ factory: function NgxStarRatingService_Factory() { return new NgxStarRatingService(); }, token: NgxStarRatingService, providedIn: \"root\" });\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxStarRatingComponent {\r\n    constructor() {\r\n        this.stars = [5, 4, 3, 2, 1];\r\n        this.propagateChange = (/**\r\n         * @param {?} _\r\n         * @return {?}\r\n         */\r\n        (_) => { });\r\n        if (!this.disabled) {\r\n            this.disabled = false;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() { }\r\n    /**\r\n     * @param {?} rate\r\n     * @return {?}\r\n     */\r\n    rate(rate) {\r\n        if (!this.disabled) {\r\n            this.propagateChange(rate);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    writeValue(value) {\r\n        this.value = value;\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) {\r\n        this.propagateChange = fn;\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) { }\r\n}\r\nNgxStarRatingComponent.decorators = [\r\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Component\"], args: [{\r\n                selector: 'ngx-star-rating',\r\n                template: \"<form action=\\\"\\\">\\n  <ng-template ngFor let-star [ngForOf]=\\\"stars\\\" let-currentElementIndex=\\\"(index + 1)\\\">\\n    <input class=\\\"star star-{{ star }}\\\" id=\\\"star-{{ star }}-{{ id }}\\\" type=\\\"radio\\\" name=\\\"star\\\" (click)=\\\"rate(star)\\\"\\n      [checked]=\\\"value == star\\\" [disabled]=\\\"disabled\\\" />\\n    <label class=\\\"star star-{{ star }}\\\" for=\\\"star-{{ star }}-{{ id }}\\\"></label>\\n  </ng-template>\\n</form>\\n\",\r\n                providers: [\r\n                    {\r\n                        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__[\"NG_VALUE_ACCESSOR\"],\r\n                        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__[\"forwardRef\"])((/**\r\n                         * @return {?}\r\n                         */\r\n                        () => NgxStarRatingComponent)),\r\n                        multi: true,\r\n                    }\r\n                ],\r\n                styles: [\"@charset \\\"UTF-8\\\";*{margin:0;padding:0;font-family:roboto}body{background:#000}.cont{width:93%;max-width:350px;text-align:center;margin:4% auto;padding:30px 0;background:#111;color:#eee;border-radius:5px;border:thin solid #444;overflow:hidden}hr{margin:20px;border:none;border-bottom:thin solid rgba(255,255,255,.1)}div.title{font-size:2em}h1 span{font-weight:300;color:#fd4}div.stars{width:270px;display:inline-block}input.star{display:none}label.star{float:right;padding:10px;font-size:36px;color:#444;transition:.2s}input.star:checked~label.star:before{content:\\\"\\uF005\\\";color:#fd4;transition:.25s}input.star-5:checked~label.star:before{color:#fe7;text-shadow:0 0 20px #952}input.star-1:checked~label.star:before{color:#f62}label.star:hover{-webkit-transform:rotate(-15deg) scale(1.3);transform:rotate(-15deg) scale(1.3)}label.star:before{content:\\\"\\uF006\\\";font-family:FontAwesome}\"]\r\n            }] }\r\n];\r\n/** @nocollapse */\r\nNgxStarRatingComponent.ctorParameters = () => [];\r\nNgxStarRatingComponent.propDecorators = {\r\n    id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }],\r\n    disabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"Input\"] }]\r\n};\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxStarRatingModule {\r\n}\r\nNgxStarRatingModule.decorators = [\r\n    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"NgModule\"], args: [{\r\n                declarations: [NgxStarRatingComponent],\r\n                imports: [\r\n                    _angular_common__WEBPACK_IMPORTED_MODULE_2__[\"CommonModule\"]\r\n                ],\r\n                exports: [NgxStarRatingComponent]\r\n            },] }\r\n];\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\n//# sourceMappingURL=ngx-star-rating.js.map\n\n\n/***/ }),\n\n/***/ \"./node_modules/raw-loader/dist/cjs.js!./src/app/products/learn/course-video/chapters/chapters.component.html\":\n/*!********************************************************************************************************************!*\\\n  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/products/learn/course-video/chapters/chapters.component.html ***!\n  \\********************************************************************************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"<p>chapters works!</p>\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/raw-loader/dist/cjs.js!./src/app/products/learn/course-video/course-video.component.html\":\n/*!***************************************************************************************************************!*\\\n  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/products/learn/course-video/course-video.component.html ***!\n  \\***************************************************************************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"<p>course-video works!</p>\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/raw-loader/dist/cjs.js!./src/app/products/learn/course-video/faq/faq.component.html\":\n/*!**********************************************************************************************************!*\\\n  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/products/learn/course-video/faq/faq.component.html ***!\n  \\**********************************************************************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"<p>faq works!</p>\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/raw-loader/dist/cjs.js!./src/app/products/learn/course-video/feeds/feeds.component.html\":\n/*!**************************************************************************************************************!*\\\n  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/products/learn/course-video/feeds/feeds.component.html ***!\n  \\**************************************************************************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"<p>feeds works!</p>\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/raw-loader/dist/cjs.js!./src/app/products/learn/course-video/files/files.component.html\":\n/*!**************************************************************************************************************!*\\\n  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/products/learn/course-video/files/files.component.html ***!\n  \\**************************************************************************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"<p>files works!</p>\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/raw-loader/dist/cjs.js!./src/app/products/learn/course-video/overview/overview.component.html\":\n/*!********************************************************************************************************************!*\\\n  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/products/learn/course-video/overview/overview.component.html ***!\n  \\********************************************************************************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"<p>overview works!</p>\\n\");\n\n/***/ }),\n\n/***/ \"./node_modules/raw-loader/dist/cjs.js!./src/app/products/learn/course/course.component.html\":\n/*!***************************************************************************************************!*\\\n  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/products/learn/course/course.component.html ***!\n  \\***************************************************************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"<div class=\\\"course-banner-background\\\" style=\\\"background-image: url('assets/img/live/event-banner.jpg');\\\">\\n    <div class=\\\"container\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-lg-6\\\">\\n                <div class=\\\"course-banner-content\\\">\\n                    <h1>Jayadeva’s Gitagovindam</h1>\\n                    <p>Nam dapibus nisl vitae elit fringilla rutrum. Aenean sollicitudin, erat a elementum rutrum, neque\\n                        sem pretium metus, quis mollis nisl nunc et massa.</p>\\n                    <ul class=\\\"course-info\\\">\\n                        <li>\\n                            <p>Authors</p>\\n                            <div class=\\\"authors\\\">\\n                                <img src=\\\"assets/img/organisation/shatavadani-ganesh.jpg\\\">\\n                            </div>\\n                            <div class=\\\"authors\\\">\\n                                <img src=\\\"assets/img/organisation/v-ranganathrav.jpg\\\">\\n                            </div>\\n                            <div class=\\\"authors\\\">\\n                                <img src=\\\"assets/img/organisation/shatavadani-ganesh.jpg\\\">\\n                            </div>\\n                        </li>\\n                        <li>\\n                            <button mat-raised-button class=\\\"shaale-red purchase-button\\\">Buy Access</button>\\n                        </li>\\n                    </ul>\\n                </div>\\n            </div>\\n            <div class=\\\"col-lg-6\\\">\\n                <div class=\\\"course-play-icon\\\">\\n                    <button mat-icon-button routerLink=\\\"/live/video\\\">\\n                        <img src=\\\"./assets/img/icons/event-play-button.png\\\" alt=\\\"Play video\\\" />\\n                    </button>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <a [ngx-scroll-to]=\\\"'#courseList'\\\" class=\\\"mouse-hover\\\">\\n        <div class=\\\"mouse\\\"></div>\\n    </a>\\n</div>\\n<section class=\\\"about-course\\\">\\n    <div class=\\\"container\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-lg-12\\\">\\n                <ul class=\\\"about-course-list\\\">\\n                    <li>\\n                        <mat-icon>signal_cellular_alt</mat-icon> Beginner\\n                    </li>\\n                    <li>\\n                        <mat-icon>hourglass_full</mat-icon> 32h 18m\\n                    </li>\\n                    <li>\\n                        <mat-icon>chat</mat-icon> English Medium\\n                    </li>\\n                    <li>\\n                        <mat-icon>update</mat-icon> Last updated on September 19, 2017\\n                    </li>\\n                </ul>\\n            </div>\\n        </div>\\n    </div>\\n</section>\\n\\n<div class=\\\"\\\" id=\\\"courseList\\\" #courseListRef>\\n\\n    <section class=\\\"course-details-section\\\">\\n        <div class=\\\"container\\\">\\n\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-8\\\">\\n\\n                    <div class=\\\"course-details-column\\\">\\n\\n\\n                        <div class=\\\"chapter-tree\\\">\\n                            <h2>Chapter</h2>\\n                            <mat-tree [dataSource]=\\\"dataSource\\\" [treeControl]=\\\"treeControl\\\" class=\\\"example-tree\\\">\\n                                <!-- This is the tree node template for leaf nodes -->\\n                                <mat-tree-node *matTreeNodeDef=\\\"let node; index\\\" matTreeNodeToggle>\\n                                    <li class=\\\"mat-tree-node\\\">\\n                                        <!-- use a disabled button to provide padding for tree leaf -->\\n                                        <button mat-icon-button>\\n                                            <mat-icon class=\\\"mat-icon-rtl-mirror\\\">\\n                                                {{treeControl.isExpanded(node) ? 'pause' : 'play_arrow'}}\\n                                            </mat-icon>\\n                                        </button>\\n                                        {{index}} {{node.name}}\\n                                    </li>\\n                                </mat-tree-node>\\n                                <!-- This is the tree node template for expandable nodes -->\\n                                <mat-nested-tree-node *matTreeNodeDef=\\\"let node; when: hasChild\\\">\\n                                    <li>\\n                                        <div class=\\\"mat-tree-node\\\">\\n                                            <button mat-icon-button matTreeNodeToggle\\n                                                [attr.aria-label]=\\\"'toggle ' + node.name\\\">\\n                                                <mat-icon class=\\\"mat-icon-rtl-mirror\\\">\\n                                                    {{treeControl.isExpanded(node) ? 'remove' : 'add'}}\\n                                                </mat-icon>\\n                                            </button>\\n                                            {{node.name}} {{i}}\\n                                        </div>\\n                                        <ul [class.example-tree-invisible]=\\\"!treeControl.isExpanded(node)\\\">\\n                                            <ng-container matTreeNodeOutlet></ng-container>\\n                                        </ul>\\n                                    </li>\\n                                </mat-nested-tree-node>\\n                            </mat-tree>\\n                        </div>\\n                        <div class=\\\"course-description-outer\\\">\\n                            <div class=\\\"course-description\\\" [class.show]=\\\"show\\\">\\n                                <h2>Description</h2>\\n                                <p>This course is a comprehensive exploration of the aesthetics and music of Jayadeva's\\n                                    Gītagovinda, a poetical and musical\\n                                    work composed in the twelfth century. It has three components to enhance your\\n                                    experience of\\n                                    this marvellous work of art:\\n                                    a literary introduction, bhāvābhinaya or the performative aspect, and musical\\n                                    training.</p>\\n\\n                                <p>Prerequisites - None. A background in classical music and dance may be useful to\\n                                    appreciate\\n                                    the nuances of the course\\n                                    (And to perform), but is not necessary to enjoy the course.</p>\\n\\n                                <p>Composed by Jayadeva, a court poet of Lakshmanasena of Bengal (1185 - 1205 AD) is\\n                                    Poetry, par\\n                                    excellence - Divided into\\n                                    12 cantos bearing in all, a priceless set of 24 Asthapadi Songs, each of which\\n                                    possesses\\n                                    about 8 couplets.</p>\\n                            </div>\\n                            <div class=\\\"load-more-style-2\\\">\\n                                <div class=\\\"row\\\">\\n                                    <div class=\\\"col-md-12\\\">\\n                                        <button mat-button (click)=\\\"show = !show\\\">\\n                                            <fa-icon [icon]=\\\"['fa', 'angle-down']\\\"></fa-icon>\\n                                            <span>&nbsp; {{ show ? 'Show less': 'Show More' }} </span>\\n                                        </button>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n\\n                        <div class=\\\"course-includes\\\">\\n                            <h2>Course Includes</h2>\\n                            <ul>\\n                                <li>Over 32 hours of exclusive & exhaustive Full HD Video covering the entire\\n                                    Gitagovindam\\n                                </li>\\n                                <li>Musical training of all the 24 Ashtapadis with meaning & Bhavabhinaya</li>\\n                                <li>Downloadable learning material - Translation & Musical Notation (English)</li>\\n                            </ul>\\n                        </div>\\n\\n                        <div class=\\\"course-authors\\\">\\n                            <h2>Authors</h2>\\n                            <ul class=\\\"authors-info\\\">\\n                                <li>\\n                                    <div class=\\\"authors\\\">\\n                                        <img src=\\\"assets/img/organisation/shatavadani-ganesh.jpg\\\">\\n                                    </div>\\n                                    <div class=\\\"authors\\\">\\n                                        <img src=\\\"assets/img/organisation/v-ranganathrav.jpg\\\">\\n                                    </div>\\n                                    <div class=\\\"authors\\\">\\n                                        <img src=\\\"assets/img/organisation/shatavadani-ganesh.jpg\\\">\\n                                    </div>\\n                                </li>\\n                            </ul>\\n                        </div>\\n\\n                    </div>\\n\\n                </div>\\n                <div class=\\\"col-md-4\\\">\\n                    <div class=\\\"course-feeds-column\\\">\\n                        <h2>Feeds</h2>\\n                        <div class=\\\"course-feeds\\\">\\n                            <div class=\\\"demo-gallery feed-gallery\\\">\\n                                <ul id=\\\"feed-aniimated-thumbnials\\\">\\n                                    <li data-responsive=\\\"assets/img/organisation/gallery-1.jpg\\\"\\n                                        data-src=\\\"assets/img/organisation/gallery-1.jpg\\\"\\n                                        data-sub-html=\\\"<h4>Fading Light</h4><p>Classic view from Rigwood Jetty on Coniston Water an old archive shot similar to an old post but a little later on.</p>\\\">\\n                                        <a href=\\\"\\\">\\n                                            <img class=\\\"img-responsive\\\" src=\\\"assets/img/organisation/gallery-1.jpg\\\">\\n                                            <div class=\\\"demo-gallery-poster\\\">\\n                                                <img src=\\\"assets/img/icons/zoom.png\\\">\\n                                            </div>\\n                                        </a>\\n                                    </li>\\n                                    <li data-responsive=\\\"assets/img/organisation/gallery-2.jpg\\\"\\n                                        data-src=\\\"assets/img/organisation/gallery-2.jpg\\\"\\n                                        data-sub-html=\\\"<h4>Bowness Bay</h4><p>A beautiful Sunrise this morning taken En-route to Keswick not one as planned but I'm extremely happy I was passing the right place at the right time....</p>\\\">\\n                                        <a href=\\\"\\\">\\n                                            <img class=\\\"img-responsive\\\" src=\\\"assets/img/organisation/gallery-2.jpg\\\">\\n                                            <div class=\\\"demo-gallery-poster\\\">\\n                                                <img src=\\\"assets/img/icons/zoom.png\\\">\\n                                            </div>\\n                                        </a>\\n                                    </li>\\n                                </ul>\\n                            </div>\\n                        </div>\\n\\n                        <div class=\\\"course-feedback\\\">\\n                            <h2>Feedback</h2>\\n                            <div class=\\\"text-center\\\">\\n\\n                                <div class=\\\"course-overall-rating\\\">\\n                                    <div class=\\\"row justify-content-md-center align-items-start\\\">\\n                                        <div class=\\\"col col-lg-4\\\">\\n                                            <h1 class=\\\"rating-num\\\">4.0</h1>\\n                                            <div class=\\\"rating-stars\\\">\\n                                                <ngx-star-rating [(ngModel)]=\\\"rating3\\\" [disabled]=\\\"true\\\">\\n                                                </ngx-star-rating>\\n                                            </div>\\n                                        </div>\\n                                        <div class=\\\"col col-lg-8\\\">\\n                                            <div class=\\\"rating-bars\\\">\\n                                                <div class=\\\"bar\\\">\\n                                                    <div class=\\\"rating-number\\\">\\n                                                        <span class=\\\"num\\\">5</span>\\n                                                        <span class=\\\"fa fa-star\\\"></span>\\n                                                    </div>\\n                                                    <div class=\\\"bar-progress\\\">\\n                                                        <span class=\\\"rating-value\\\"></span>\\n                                                    </div>\\n                                                    <div class=\\\"total-users\\\">\\n                                                        <span>1800</span>\\n                                                    </div>\\n                                                </div>\\n                                                <div class=\\\"bar\\\">\\n                                                    <div class=\\\"rating-number\\\">\\n                                                        <span class=\\\"num\\\">4</span>\\n                                                        <span class=\\\"fa fa-star\\\"></span>\\n                                                    </div>\\n                                                    <div class=\\\"bar-progress\\\">\\n                                                        <span class=\\\"rating-value\\\"></span>\\n                                                    </div>\\n                                                    <div class=\\\"total-users\\\">\\n                                                        <span>1800</span>\\n                                                    </div>\\n                                                </div>\\n                                                <div class=\\\"bar\\\">\\n                                                    <div class=\\\"rating-number\\\">\\n                                                        <span class=\\\"num\\\">3</span>\\n                                                        <span class=\\\"fa fa-star\\\"></span>\\n                                                    </div>\\n                                                    <div class=\\\"bar-progress\\\">\\n                                                        <span class=\\\"rating-value\\\"></span>\\n                                                    </div>\\n                                                    <div class=\\\"total-users\\\">\\n                                                        <span>1800</span>\\n                                                    </div>\\n                                                </div>\\n                                                <div class=\\\"bar\\\">\\n                                                    <div class=\\\"rating-number\\\">\\n                                                        <span class=\\\"num\\\">2</span>\\n                                                        <span class=\\\"fa fa-star\\\"></span>\\n                                                    </div>\\n                                                    <div class=\\\"bar-progress\\\">\\n                                                        <span class=\\\"rating-value\\\"></span>\\n                                                    </div>\\n                                                    <div class=\\\"total-users\\\">\\n                                                        <span>1800</span>\\n                                                    </div>\\n                                                </div>\\n                                                <div class=\\\"bar\\\">\\n                                                    <div class=\\\"rating-number\\\">\\n                                                        <span class=\\\"num\\\">1</span>\\n                                                        <span class=\\\"fa fa-star\\\"></span>\\n                                                    </div>\\n                                                    <div class=\\\"bar-progress\\\">\\n                                                        <span class=\\\"rating-value\\\"></span>\\n                                                    </div>\\n                                                    <div class=\\\"total-users\\\">\\n                                                        <span>1800</span>\\n                                                    </div>\\n                                                </div>\\n                                            </div>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n\\n                                <div class=\\\"feedback-card\\\">\\n                                    <div class=\\\"user-feedback\\\">\\n                                        <h3 class=\\\"mt-2 mb-0\\\">Vikram jit Singh</h3>\\n                                        <div class=\\\"user-feedback-rating\\\">\\n                                            <p class=\\\"text-muted\\\">10 Sept</p>\\n                                        </div>\\n                                        <p class=\\\"content\\\">madam, your lessons helped me in re-visiting the basics\\n                                            and i will now proceed further into the learning of sanskrit ( deva\\n                                            basha ). Thanks a lot!</p>\\n                                    </div>\\n                                </div>\\n                            </div>\\n\\n                            <!-- <div class=\\\"course-overall-rating\\\">\\n                                <div class=\\\"\\\">\\n                                    <ngx-star-rating [(ngModel)]=\\\"rating3\\\" disabled></ngx-star-rating>\\n                                </div>\\n                                <div class=\\\"\\\">\\n                                    <div class=\\\"rating-graph\\\">\\n                                        <\\n                                    </div>\\n                                </div>\\n                            </div>\\n\\n                            <div class=\\\"cont\\\">\\n                                <div class=\\\"stars\\\">\\n                                    <ngx-star-rating [(ngModel)]=\\\"rating3\\\" [id]=\\\"'rating3'\\\"></ngx-star-rating>\\n                                </div>\\n                                <div>Rating: {{ rating3 }}</div>\\n                            </div> -->\\n                        </div>\\n                    </div>\\n\\n                </div>\\n            </div>\\n\\n        </div>\\n    </section>\\n\\n</div>\");\n\n/***/ }),\n\n/***/ \"./node_modules/raw-loader/dist/cjs.js!./src/app/products/learn/learn/learn.component.html\":\n/*!*************************************************************************************************!*\\\n  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/products/learn/learn/learn.component.html ***!\n  \\*************************************************************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"<div class=\\\"slider-banner\\\">\\n    <div class=\\\"slider-inner\\\">\\n        <div class=\\\"slider-container\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-lg-12\\\">\\n                    <ngx-slick-carousel class=\\\"carousel banner-slider\\\" #slickModal=\\\"slick-carousel\\\"\\n                        [config]=\\\"bannerSliderConfig\\\" (init)=\\\"slickInit($event)\\\">\\n\\n                        <div ngxSlickItem class=\\\"slide\\\" *ngFor=\\\"let banner of sliderBanner\\\">\\n                            <div class=\\\"banner-image-container\\\">\\n                                <img class=\\\"owl-lazy\\\" src=\\\"{{banner.img}}\\\" alt=\\\"\\\">\\n                                <div class=\\\"slider-caption\\\">\\n                                    <div class=\\\"container\\\">\\n                                        <div class=\\\"row\\\">\\n                                            <div class=\\\"col-sm-6\\\">\\n                                                <h1>{{banner.title}}</h1>\\n                                                <button mat-raised-button class=\\\"shaale-red\\\">Buy Access</button>\\n                                            </div>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </ngx-slick-carousel>\\n                    <div class=\\\"slide-content\\\">\\n                        <div class=\\\"slide-content-inner\\\">\\n                            <div class=\\\"container\\\">\\n                                <div class=\\\"row\\\">\\n                                    <div class=\\\"col-12\\\">\\n                                        <div class=\\\"slide-content-box\\\" (click)=\\\"changeSlide(0)\\\">\\n                                            <div class=\\\"progress-time\\\"></div>\\n                                            <p>Feel the dramatic and traditional costumes in distinctive stage\\n                                                practices.</p>\\n                                        </div>\\n                                        <div class=\\\"slide-content-box\\\" (click)=\\\"changeSlide(1)\\\">\\n                                            <div class=\\\"progress-time\\\"></div>\\n                                            <p>Feel the dramatic and traditional costumes in distinctive stage\\n                                                practices.</p>\\n                                        </div>\\n                                        <div class=\\\"slide-content-box\\\" (click)=\\\"changeSlide(2)\\\">\\n                                            <div class=\\\"progress-time\\\"></div>\\n                                            <p>Feel the dramatic and traditional costumes in distinctive stage\\n                                                practices.</p>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <a [ngx-scroll-to]=\\\"'#eventsList'\\\" class=\\\"mouse-hover\\\">\\n                        <div class=\\\"mouse\\\"></div>\\n                    </a>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\\n<!-- <owl-carousel [options]=\\\"carouselOptions\\\" [items]=\\\"images\\\"\\n    [carouselClasses]=\\\"['owl-theme', 'single-image-slider', 'sliding']\\\">\\n    <div class=\\\"item\\\" *ngFor=\\\"let image of images;let i= index\\\">\\n        <img class=\\\"slide-image\\\" src=\\\"{{image.image}}\\\">\\n        <div class=\\\"slide-text\\\">\\n            <h4>{{image.text}}</h4>\\n        </div>\\n    </div>\\n</owl-carousel> -->\\n\\n<div class=\\\"shaale-live-content\\\" id=\\\"eventsList\\\" #eventsListRef>\\n\\n    <section class=\\\"shaale-live-content-section\\\">\\n        <div class=\\\"container\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-lg-12\\\">\\n                    <h1 class=\\\"heading-v1\\\">Live Events</h1>\\n                    <ngx-slick-carousel class=\\\"carousel ngx-silck-slider\\\" #slickModal=\\\"slick-carousel\\\"\\n                        [config]=\\\"videoSlideConfig\\\" (init)=\\\"slickInit($event)\\\">\\n\\n                        <div ngxSlickItem class=\\\"slider-content-container slide\\\" *ngFor=\\\"let video of videos\\\"\\n                            (click)=\\\"selectEvent(video)\\\">\\n                            <div class=\\\"slider-image-container\\\">\\n                                <img class=\\\"owl-lazy\\\" src=\\\"{{video.img}}\\\" alt=\\\"\\\">\\n                            </div>\\n                        </div>\\n                    </ngx-slick-carousel>\\n                </div>\\n            </div>\\n        </div>\\n    </section>\\n\\n    <section class=\\\"shaale-live-content-section\\\">\\n        <div class=\\\"container\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-lg-12\\\">\\n                    <h1 class=\\\"heading-v1\\\">Upcoming Events</h1>\\n                    <ngx-slick-carousel class=\\\"carousel ngx-silck-slider\\\" #slickModal=\\\"slick-carousel\\\"\\n                        [config]=\\\"videoSlideConfig\\\" (init)=\\\"slickInit($event)\\\">\\n\\n                        <div ngxSlickItem class=\\\"slider-content-container slide\\\" *ngFor=\\\"let video of videos\\\">\\n                            <div class=\\\"slider-image-container\\\">\\n                                <img class=\\\"owl-lazy\\\" src=\\\"{{video.img}}\\\" alt=\\\"\\\">\\n                            </div>\\n                        </div>\\n                    </ngx-slick-carousel>\\n                </div>\\n            </div>\\n        </div>\\n    </section>\\n\\n    <section class=\\\"shaale-live-content-section\\\">\\n        <div class=\\\"container\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-lg-12\\\">\\n                    <h1 class=\\\"heading-v1\\\">Premium Events</h1>\\n                    <ngx-slick-carousel class=\\\"carousel ngx-silck-slider\\\" #slickModal=\\\"slick-carousel\\\"\\n                        [config]=\\\"videoSlideConfig\\\" (init)=\\\"slickInit($event)\\\">\\n\\n                        <div ngxSlickItem class=\\\"slider-content-container slide\\\" *ngFor=\\\"let video of videos\\\">\\n                            <div class=\\\"slider-image-container\\\">\\n                                <img class=\\\"owl-lazy\\\" src=\\\"{{video.img}}\\\" alt=\\\"\\\">\\n                            </div>\\n                        </div>\\n                    </ngx-slick-carousel>\\n                </div>\\n            </div>\\n        </div>\\n    </section>\\n\\n    <section class=\\\"shaale-live-content-section\\\">\\n        <div class=\\\"container\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-lg-12\\\">\\n                    <h1 class=\\\"heading-v1\\\">All Archive</h1>\\n                    <ngx-slick-carousel class=\\\"carousel ngx-silck-slider\\\" #slickModal=\\\"slick-carousel\\\"\\n                        [config]=\\\"videoSlideConfig\\\" (init)=\\\"slickInit($event)\\\">\\n\\n                        <div ngxSlickItem class=\\\"slider-content-container slide\\\" *ngFor=\\\"let video of videos\\\">\\n                            <div class=\\\"slider-image-container\\\">\\n                                <img class=\\\"owl-lazy\\\" src=\\\"{{video.img}}\\\" alt=\\\"\\\">\\n                            </div>\\n                        </div>\\n                    </ngx-slick-carousel>\\n                </div>\\n            </div>\\n        </div>\\n    </section>\\n\\n    <section class=\\\"shaale-live-content-section\\\">\\n        <div class=\\\"container\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-lg-12\\\">\\n                    <h1 class=\\\"heading-v1\\\">For You</h1>\\n                    <ngx-slick-carousel class=\\\"carousel ngx-silck-slider\\\" #slickModal=\\\"slick-carousel\\\"\\n                        [config]=\\\"videoSlideConfig\\\" (init)=\\\"slickInit($event)\\\">\\n\\n                        <div ngxSlickItem class=\\\"slider-content-container slide\\\" *ngFor=\\\"let video of videos\\\">\\n                            <div class=\\\"slider-image-container\\\">\\n                                <img class=\\\"owl-lazy\\\" src=\\\"{{video.img}}\\\" alt=\\\"\\\">\\n                            </div>\\n                        </div>\\n                    </ngx-slick-carousel>\\n                </div>\\n            </div>\\n        </div>\\n    </section>\\n\\n</div>\");\n\n/***/ }),\n\n/***/ \"./src/app/products/learn/course-video/chapters/chapters.component.scss\":\n/*!******************************************************************************!*\\\n  !*** ./src/app/products/learn/course-video/chapters/chapters.component.scss ***!\n  \\******************************************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Byb2R1Y3RzL2xlYXJuL2NvdXJzZS12aWRlby9jaGFwdGVycy9jaGFwdGVycy5jb21wb25lbnQuc2NzcyJ9 */\");\n\n/***/ }),\n\n/***/ \"./src/app/products/learn/course-video/chapters/chapters.component.ts\":\n/*!****************************************************************************!*\\\n  !*** ./src/app/products/learn/course-video/chapters/chapters.component.ts ***!\n  \\****************************************************************************/\n/*! exports provided: ChaptersComponent */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ChaptersComponent\", function() { return ChaptersComponent; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n\n\nlet ChaptersComponent = class ChaptersComponent {\n    constructor() { }\n    ngOnInit() {\n    }\n};\nChaptersComponent = tslib__WEBPACK_IMPORTED_MODULE_0__[\"__decorate\"]([\n    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Component\"])({\n        selector: 'shaale-chapters',\n        template: tslib__WEBPACK_IMPORTED_MODULE_0__[\"__importDefault\"](__webpack_require__(/*! raw-loader!./chapters.component.html */ \"./node_modules/raw-loader/dist/cjs.js!./src/app/products/learn/course-video/chapters/chapters.component.html\")).default,\n        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__[\"__importDefault\"](__webpack_require__(/*! ./chapters.component.scss */ \"./src/app/products/learn/course-video/chapters/chapters.component.scss\")).default]\n    })\n], ChaptersComponent);\n\n\n\n/***/ }),\n\n/***/ \"./src/app/products/learn/course-video/course-video.component.scss\":\n/*!*************************************************************************!*\\\n  !*** ./src/app/products/learn/course-video/course-video.component.scss ***!\n  \\*************************************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Byb2R1Y3RzL2xlYXJuL2NvdXJzZS12aWRlby9jb3Vyc2UtdmlkZW8uY29tcG9uZW50LnNjc3MifQ== */\");\n\n/***/ }),\n\n/***/ \"./src/app/products/learn/course-video/course-video.component.ts\":\n/*!***********************************************************************!*\\\n  !*** ./src/app/products/learn/course-video/course-video.component.ts ***!\n  \\***********************************************************************/\n/*! exports provided: CourseVideoComponent */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CourseVideoComponent\", function() { return CourseVideoComponent; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n\n\nlet CourseVideoComponent = class CourseVideoComponent {\n    constructor() { }\n    ngOnInit() {\n    }\n};\nCourseVideoComponent = tslib__WEBPACK_IMPORTED_MODULE_0__[\"__decorate\"]([\n    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Component\"])({\n        selector: 'shaale-course-video',\n        template: tslib__WEBPACK_IMPORTED_MODULE_0__[\"__importDefault\"](__webpack_require__(/*! raw-loader!./course-video.component.html */ \"./node_modules/raw-loader/dist/cjs.js!./src/app/products/learn/course-video/course-video.component.html\")).default,\n        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__[\"__importDefault\"](__webpack_require__(/*! ./course-video.component.scss */ \"./src/app/products/learn/course-video/course-video.component.scss\")).default]\n    })\n], CourseVideoComponent);\n\n\n\n/***/ }),\n\n/***/ \"./src/app/products/learn/course-video/faq/faq.component.scss\":\n/*!********************************************************************!*\\\n  !*** ./src/app/products/learn/course-video/faq/faq.component.scss ***!\n  \\********************************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Byb2R1Y3RzL2xlYXJuL2NvdXJzZS12aWRlby9mYXEvZmFxLmNvbXBvbmVudC5zY3NzIn0= */\");\n\n/***/ }),\n\n/***/ \"./src/app/products/learn/course-video/faq/faq.component.ts\":\n/*!******************************************************************!*\\\n  !*** ./src/app/products/learn/course-video/faq/faq.component.ts ***!\n  \\******************************************************************/\n/*! exports provided: FaqComponent */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FaqComponent\", function() { return FaqComponent; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n\n\nlet FaqComponent = class FaqComponent {\n    constructor() { }\n    ngOnInit() {\n    }\n};\nFaqComponent = tslib__WEBPACK_IMPORTED_MODULE_0__[\"__decorate\"]([\n    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Component\"])({\n        selector: 'shaale-faq',\n        template: tslib__WEBPACK_IMPORTED_MODULE_0__[\"__importDefault\"](__webpack_require__(/*! raw-loader!./faq.component.html */ \"./node_modules/raw-loader/dist/cjs.js!./src/app/products/learn/course-video/faq/faq.component.html\")).default,\n        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__[\"__importDefault\"](__webpack_require__(/*! ./faq.component.scss */ \"./src/app/products/learn/course-video/faq/faq.component.scss\")).default]\n    })\n], FaqComponent);\n\n\n\n/***/ }),\n\n/***/ \"./src/app/products/learn/course-video/feeds/feeds.component.scss\":\n/*!************************************************************************!*\\\n  !*** ./src/app/products/learn/course-video/feeds/feeds.component.scss ***!\n  \\************************************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Byb2R1Y3RzL2xlYXJuL2NvdXJzZS12aWRlby9mZWVkcy9mZWVkcy5jb21wb25lbnQuc2NzcyJ9 */\");\n\n/***/ }),\n\n/***/ \"./src/app/products/learn/course-video/feeds/feeds.component.ts\":\n/*!**********************************************************************!*\\\n  !*** ./src/app/products/learn/course-video/feeds/feeds.component.ts ***!\n  \\**********************************************************************/\n/*! exports provided: FeedsComponent */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FeedsComponent\", function() { return FeedsComponent; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n\n\nlet FeedsComponent = class FeedsComponent {\n    constructor() { }\n    ngOnInit() {\n    }\n};\nFeedsComponent = tslib__WEBPACK_IMPORTED_MODULE_0__[\"__decorate\"]([\n    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Component\"])({\n        selector: 'shaale-feeds',\n        template: tslib__WEBPACK_IMPORTED_MODULE_0__[\"__importDefault\"](__webpack_require__(/*! raw-loader!./feeds.component.html */ \"./node_modules/raw-loader/dist/cjs.js!./src/app/products/learn/course-video/feeds/feeds.component.html\")).default,\n        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__[\"__importDefault\"](__webpack_require__(/*! ./feeds.component.scss */ \"./src/app/products/learn/course-video/feeds/feeds.component.scss\")).default]\n    })\n], FeedsComponent);\n\n\n\n/***/ }),\n\n/***/ \"./src/app/products/learn/course-video/files/files.component.scss\":\n/*!************************************************************************!*\\\n  !*** ./src/app/products/learn/course-video/files/files.component.scss ***!\n  \\************************************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Byb2R1Y3RzL2xlYXJuL2NvdXJzZS12aWRlby9maWxlcy9maWxlcy5jb21wb25lbnQuc2NzcyJ9 */\");\n\n/***/ }),\n\n/***/ \"./src/app/products/learn/course-video/files/files.component.ts\":\n/*!**********************************************************************!*\\\n  !*** ./src/app/products/learn/course-video/files/files.component.ts ***!\n  \\**********************************************************************/\n/*! exports provided: FilesComponent */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FilesComponent\", function() { return FilesComponent; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n\n\nlet FilesComponent = class FilesComponent {\n    constructor() { }\n    ngOnInit() {\n    }\n};\nFilesComponent = tslib__WEBPACK_IMPORTED_MODULE_0__[\"__decorate\"]([\n    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Component\"])({\n        selector: 'shaale-files',\n        template: tslib__WEBPACK_IMPORTED_MODULE_0__[\"__importDefault\"](__webpack_require__(/*! raw-loader!./files.component.html */ \"./node_modules/raw-loader/dist/cjs.js!./src/app/products/learn/course-video/files/files.component.html\")).default,\n        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__[\"__importDefault\"](__webpack_require__(/*! ./files.component.scss */ \"./src/app/products/learn/course-video/files/files.component.scss\")).default]\n    })\n], FilesComponent);\n\n\n\n/***/ }),\n\n/***/ \"./src/app/products/learn/course-video/overview/overview.component.scss\":\n/*!******************************************************************************!*\\\n  !*** ./src/app/products/learn/course-video/overview/overview.component.scss ***!\n  \\******************************************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Byb2R1Y3RzL2xlYXJuL2NvdXJzZS12aWRlby9vdmVydmlldy9vdmVydmlldy5jb21wb25lbnQuc2NzcyJ9 */\");\n\n/***/ }),\n\n/***/ \"./src/app/products/learn/course-video/overview/overview.component.ts\":\n/*!****************************************************************************!*\\\n  !*** ./src/app/products/learn/course-video/overview/overview.component.ts ***!\n  \\****************************************************************************/\n/*! exports provided: OverviewComponent */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OverviewComponent\", function() { return OverviewComponent; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n\n\nlet OverviewComponent = class OverviewComponent {\n    constructor() { }\n    ngOnInit() {\n    }\n};\nOverviewComponent = tslib__WEBPACK_IMPORTED_MODULE_0__[\"__decorate\"]([\n    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Component\"])({\n        selector: 'shaale-overview',\n        template: tslib__WEBPACK_IMPORTED_MODULE_0__[\"__importDefault\"](__webpack_require__(/*! raw-loader!./overview.component.html */ \"./node_modules/raw-loader/dist/cjs.js!./src/app/products/learn/course-video/overview/overview.component.html\")).default,\n        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__[\"__importDefault\"](__webpack_require__(/*! ./overview.component.scss */ \"./src/app/products/learn/course-video/overview/overview.component.scss\")).default]\n    })\n], OverviewComponent);\n\n\n\n/***/ }),\n\n/***/ \"./src/app/products/learn/course/course.component.scss\":\n/*!*************************************************************!*\\\n  !*** ./src/app/products/learn/course/course.component.scss ***!\n  \\*************************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"/* Theme for the ripple elements.*/\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\nbody {\\n  font-family: \\\"Source Sans Pro\\\", sans-serif;\\n}\\nh1 {\\n  text-align: center;\\n  font-size: 3em;\\n  text-transform: uppercase;\\n}\\n.padding-right {\\n  padding-right: 40px;\\n}\\n.padding-left {\\n  padding-left: 40px;\\n}\\n.margin-bottom-50 {\\n  margin-bottom: 50px;\\n}\\n.margin-top-50 {\\n  margin-bottom: 50px;\\n}\\n.course-banner-background {\\n  padding: 30px 0;\\n  position: relative;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  align-self: center;\\n  min-height: calc(100vh - 60px);\\n  background-repeat: no-repeat;\\n  background-size: cover;\\n  background-position: center center;\\n}\\n.course-banner-background:before {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  bottom: 0;\\n  right: 0;\\n  content: \\\"\\\";\\n  z-index: 0;\\n  height: 100%;\\n}\\n.course-banner-background .container {\\n  position: relative;\\n}\\n.course-banner-background .course-banner-content h1 {\\n  font-weight: 300;\\n  font-size: 36px;\\n  letter-spacing: 0.05px;\\n  text-align: left;\\n  margin-bottom: 20px;\\n}\\n.course-banner-background .course-banner-content p {\\n  font-size: 18px;\\n  color: #A2A4AB;\\n  letter-spacing: -0.02px;\\n}\\n.course-banner-background .course-banner-content .course-info {\\n  list-style-type: none;\\n  padding: 0;\\n  margin: 0;\\n}\\n.course-banner-background .course-banner-content .course-info li {\\n  display: block;\\n  margin-bottom: 20px;\\n}\\n.course-banner-background .course-banner-content .course-info li .authors {\\n  height: 60px;\\n  width: 60px;\\n  border-radius: 100%;\\n  overflow: hidden;\\n  display: inline-block;\\n  margin-right: 20px;\\n  margin-bottom: 20px;\\n}\\n.course-banner-background .course-banner-content .course-info li .authors img {\\n  max-width: 100%;\\n}\\n.course-banner-background .course-banner-content .course-info li .purchase-button {\\n  font-size: 16px;\\n  color: #FFFFFF;\\n  letter-spacing: 1px;\\n  font-weight: 300;\\n  text-transform: uppercase;\\n  width: 180px;\\n  height: 45px;\\n}\\n.course-banner-background .course-play-icon {\\n  display: flex;\\n  justify-content: center;\\n  vertical-align: middle;\\n  align-items: center;\\n  align-self: center;\\n  height: 100%;\\n  width: 100%;\\n}\\n.course-banner-background .course-play-icon button {\\n  height: 100px;\\n  width: 100px;\\n  border-radius: 100%;\\n  opacity: 0.5;\\n}\\n.course-banner-background .course-play-icon button img {\\n  max-width: 100%;\\n}\\n.about-course {\\n  width: 100%;\\n  min-height: 60px;\\n  background: #131415;\\n}\\n.about-course .about-course-list {\\n  margin: 0;\\n  padding: 0;\\n  list-style: none;\\n  display: flex;\\n  align-items: center;\\n  align-self: center;\\n  justify-content: flex-start;\\n  min-height: 60px;\\n}\\n.about-course .about-course-list li {\\n  display: flex;\\n  padding-right: 50px;\\n  justify-content: center;\\n  align-items: center;\\n  font-size: 18px;\\n  color: #A2A4AB;\\n  letter-spacing: -0.02px;\\n  text-align: left;\\n  line-height: 42px;\\n}\\n.about-course .about-course-list li mat-icon {\\n  margin-right: 5px;\\n}\\n.course-details-section {\\n  padding: 50px 0;\\n}\\n.course-details-section h2 {\\n  font-size: 32px;\\n  letter-spacing: -0.04px;\\n  font-weight: 600;\\n  margin-bottom: 30px;\\n  text-align: left;\\n}\\n.course-details-section .course-details-column {\\n  padding-right: 50px;\\n}\\n.course-details-section .course-details-column .course-description-outer {\\n  padding-bottom: 50px;\\n}\\n.course-details-section .course-details-column .course-description-outer .course-description {\\n  max-height: 400px;\\n  overflow: hidden;\\n  transition: all 0.3s;\\n}\\n.course-details-section .course-details-column .course-description-outer .course-description.show {\\n  overflow: visible;\\n  height: auto;\\n  max-height: auto;\\n  transition: height 0.3s;\\n}\\n.course-details-section .course-details-column .course-description-outer .course-description p {\\n  font-size: 18px;\\n  line-height: 24px;\\n  text-align: justify;\\n  color: #A2A4AB;\\n}\\n.course-details-section .course-details-column .course-includes {\\n  padding-bottom: 50px;\\n}\\n.course-details-section .course-details-column .course-includes ul {\\n  padding-left: 20px;\\n  margin: 0;\\n}\\n.course-details-section .course-details-column .course-includes ul li {\\n  font-size: 18px;\\n  color: #A2A4AB;\\n  letter-spacing: -0.02px;\\n  text-align: left;\\n  line-height: 27px;\\n  margin-bottom: 15px;\\n}\\n.course-details-section .course-details-column .course-authors {\\n  list-style-type: none;\\n  padding: 0;\\n  margin: 0;\\n  padding-bottom: 50px;\\n}\\n.course-details-section .course-details-column .course-authors ul {\\n  padding: 0;\\n  margin: 0;\\n}\\n.course-details-section .course-details-column .course-authors ul li {\\n  display: block;\\n  margin-bottom: 20px;\\n}\\n.course-details-section .course-details-column .course-authors ul li .authors {\\n  height: 100px;\\n  width: 100px;\\n  border-radius: 100%;\\n  overflow: hidden;\\n  display: inline-block;\\n  margin-right: 20px;\\n  margin-bottom: 20px;\\n}\\n.course-details-section .course-details-column .course-authors ul li .authors img {\\n  max-width: 100%;\\n}\\n.course-details-section .course-feeds-column .course-feeds {\\n  max-height: 400px;\\n  overflow-y: auto;\\n  transition: all 0.3s;\\n  padding-right: 15px;\\n  margin-bottom: 50px;\\n}\\n.course-details-section .course-feeds-column .course-feeds ul li {\\n  width: 100%;\\n  height: auto;\\n  margin-bottom: 20px;\\n}\\n.course-details-section .course-feeds-column .course-feeds ul li a img {\\n  max-width: 100%;\\n  height: auto;\\n}\\n.course-details-section .course-feeds-column .course-feeds .feed-img {\\n  max-width: 100%;\\n}\\n@media (max-width: 768px) {\\n  .padding-right {\\n    padding-right: 15px;\\n  }\\n\\n  .padding-left {\\n    padding-left: 15px;\\n  }\\n}\\n@media (max-width: 576px) {\\n  .padding-right {\\n    padding-right: 15px;\\n  }\\n\\n  .padding-left {\\n    padding-left: 15px;\\n  }\\n\\n  .background {\\n    padding: 40px 0 0 0;\\n  }\\n  .background h1 {\\n    line-height: 1em;\\n  }\\n}\\n.feedback-card {\\n  padding: 15px;\\n  border-radius: 3px;\\n  background: #131415;\\n}\\n.feedback-card .user-feedback h3 {\\n  font-size: 18px;\\n  color: #FFFFFF;\\n  text-align: left;\\n  font-weight: 600;\\n}\\n.feedback-card .user-feedback .user-feedback-rating {\\n  margin-bottom: 8px;\\n  width: 100%;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  align-self: center;\\n}\\n.feedback-card .user-feedback .user-feedback-rating p {\\n  font-weight: 300;\\n  font-size: 14px;\\n  color: #808080;\\n  text-align: right;\\n  margin: 0;\\n}\\n.feedback-card .user-feedback .content {\\n  font-size: 16px;\\n  color: #A2A4AB;\\n  letter-spacing: -0.02px;\\n  text-align: left;\\n  line-height: 21px;\\n  margin: 0;\\n}\\n.course-overall-rating .rating-num {\\n  font-weight: 300;\\n  font-size: 60px;\\n  color: #FFFFFF;\\n  text-align: left;\\n  margin-bottom: 10px;\\n}\\n.course-overall-rating .rating-stars label {\\n  font-size: 12px;\\n}\\n.rating-bars {\\n  width: 100%;\\n}\\n.rating-bars .bar {\\n  width: 100%;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  align-self: center;\\n  margin-bottom: 5px;\\n}\\n.rating-bars .bar .rating-number {\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  margin-right: 8px;\\n}\\n.rating-bars .bar .rating-number span {\\n  color: #808080;\\n  font-size: 13px;\\n  line-height: 18px;\\n  padding: 3px;\\n  margin-top: 0;\\n  margin-bottom: 0;\\n  display: block;\\n}\\n.rating-bars .bar .bar-progress {\\n  width: 100%;\\n  background: #ffffff;\\n  height: 8px;\\n  border-radius: 8px;\\n  overflow: hidden;\\n}\\n.rating-bars .bar .bar-progress .rating-value {\\n  width: 50%;\\n  height: 100%;\\n  display: block;\\n  background-color: #FFC60B;\\n}\\n.rating-bars .bar .total-users {\\n  margin-left: 8px;\\n}\\n.rating-bars .bar .total-users span {\\n  color: #808080;\\n  font-size: 13px;\\n  line-height: 18px;\\n  padding: 3px;\\n  margin-top: 0;\\n  margin-bottom: 0;\\n  display: block;\\n}\\n/*# sourceMappingURL=data:application/json;base64, */\");\n\n/***/ }),\n\n/***/ \"./src/app/products/learn/course/course.component.ts\":\n/*!***********************************************************!*\\\n  !*** ./src/app/products/learn/course/course.component.ts ***!\n  \\***********************************************************/\n/*! exports provided: CourseComponent */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CourseComponent\", function() { return CourseComponent; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ \"./node_modules/@angular/router/fesm2015/router.js\");\n/* harmony import */ var _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/tree */ \"./node_modules/@angular/cdk/esm2015/tree.js\");\n/* harmony import */ var _angular_material_tree__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material/tree */ \"./node_modules/@angular/material/esm2015/tree.js\");\n/* harmony import */ var _shared_seo_seo_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../shared/seo/seo.service */ \"./src/app/shared/seo/seo.service.ts\");\n\n\n\n\n\n\nconst TREE_DATA = [\n    {\n        name: 'Introduction',\n        children: [\n            { name: 'Apple' },\n            { name: 'Banana' },\n            { name: 'Fruit loops' },\n        ]\n    },\n    {\n        name: 'Ashtapadi - 1',\n        children: [\n            { name: 'Apple' },\n            { name: 'Banana' },\n            { name: 'Fruit loops' },\n        ]\n    },\n    {\n        name: 'Ashtapadi - 2',\n        children: [\n            { name: 'Apple' },\n            { name: 'Banana' },\n            { name: 'Fruit loops' },\n        ]\n    },\n    {\n        name: 'Ashtapadi - 3',\n        children: [\n            { name: 'Apple' },\n            { name: 'Banana' },\n            { name: 'Fruit loops' },\n        ]\n    },\n    {\n        name: 'Ashtapadi - 4',\n        children: [\n            { name: 'Apple' },\n            { name: 'Banana' },\n            { name: 'Fruit loops' },\n        ]\n    },\n    {\n        name: 'Ashtapadi - 5',\n        children: [\n            { name: 'Apple' },\n            { name: 'Banana' },\n            { name: 'Fruit loops' },\n        ]\n    },\n    {\n        name: 'Ashtapadi - 6',\n        children: [\n            { name: 'Apple' },\n            { name: 'Banana' },\n            { name: 'Fruit loops' },\n        ]\n    }\n];\nlet CourseComponent = class CourseComponent {\n    constructor(router, seo) {\n        this.router = router;\n        this.seo = seo;\n        this.treeControl = new _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_3__[\"NestedTreeControl\"](node => node.children);\n        this.dataSource = new _angular_material_tree__WEBPACK_IMPORTED_MODULE_4__[\"MatTreeNestedDataSource\"]();\n        this.show = false;\n        this.hasChild = (_, node) => !!node.children && node.children.length > 0;\n        this.videos = [\n            {\n                img: 'assets/img/organisation/video-poster-1.jpg',\n                name: 'Rationalist s dramas and comedies of social suffering ',\n                description: 'GIPA'\n            },\n            {\n                img: 'assets/img/organisation/video-poster-2.jpg',\n                name: 'naraharikaviya torave ramayanada reading- definition program',\n                description: 'GIPA'\n            },\n            {\n                img: 'assets/img/organisation/video-poster-3.jpg',\n                name: 'd. V. G. Literary Awakening - Dr. R. Ganesh',\n                description: 'GIPA'\n            },\n            {\n                img: 'assets/img/organisation/video-poster-2.jpg',\n                name: 'naraharikaviya torave ramayanada reading- definition program',\n                description: 'GIPA'\n            },\n            {\n                img: 'assets/img/organisation/video-poster-3.jpg',\n                name: 'd. V. G. Literary Awakening - Dr. R. Ganesh',\n                description: 'GIPA'\n            }\n        ];\n        this.videoSlideConfig = {\n            slidesToShow: 3,\n            slidesToScroll: 3,\n            nextArrow: '<div class=\"nav-btn next-slide\"><img src=\"assets/img/icons/right-arrow-icon.png\"></div>',\n            prevArrow: '<div class=\"nav-btn prev-slide\"><img src=\"assets/img/icons/left-arrow-icon.png\"></div>',\n            dots: false,\n            infinite: false,\n            dragScroll: true,\n            swipe: true,\n            touchMove: true,\n            responsive: [\n                {\n                    breakpoint: 1024,\n                    settings: {\n                        slidesToShow: 2,\n                        slidesToScroll: 2\n                    }\n                },\n                {\n                    breakpoint: 991,\n                    settings: {\n                        slidesToShow: 2,\n                        slidesToScroll: 2\n                    }\n                },\n                {\n                    breakpoint: 768,\n                    settings: {\n                        slidesToShow: 2,\n                        slidesToScroll: 2\n                    }\n                },\n                {\n                    breakpoint: 480,\n                    settings: {\n                        slidesToShow: 1,\n                        slidesToScroll: 1\n                    }\n                }\n            ]\n        };\n        this.dataSource.data = TREE_DATA;\n        this.rating3 = 5;\n    }\n    slickInit(e) {\n        console.log('slick initialized');\n    }\n    selectEvent(data) {\n        console.log(data);\n        // let heroId = data ? data : null;\n        // Pass along the hero id if available\n        // so that the HeroList component can select that hero.\n        // Include a junk 'foo' property for fun.\n        // this.router.navigate(['live/event']);\n    }\n    ngOnInit() {\n        lightGallery(document.getElementById('lightgallery'));\n        lightGallery(document.getElementById('feed-aniimated-thumbnials'), {\n            thumbnail: true,\n            animateThumb: false,\n            showThumbByDefault: false\n        });\n        lightGallery(document.getElementById('video-gallery'));\n        this.seo.generateTags({\n            title: 'Amit',\n            description: 'Amit Dwivedi',\n            image: \"https://miro.medium.com/max/512/1*sXrpvkWUPm1K9zGKhI3MlA.png\",\n            slug: 'https://shaale.com/'\n        });\n    }\n};\nCourseComponent.ctorParameters = () => [\n    { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__[\"Router\"] },\n    { type: _shared_seo_seo_service__WEBPACK_IMPORTED_MODULE_5__[\"SeoService\"] }\n];\nCourseComponent = tslib__WEBPACK_IMPORTED_MODULE_0__[\"__decorate\"]([\n    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Component\"])({\n        selector: 'shaale-course',\n        template: tslib__WEBPACK_IMPORTED_MODULE_0__[\"__importDefault\"](__webpack_require__(/*! raw-loader!./course.component.html */ \"./node_modules/raw-loader/dist/cjs.js!./src/app/products/learn/course/course.component.html\")).default,\n        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__[\"__importDefault\"](__webpack_require__(/*! ./course.component.scss */ \"./src/app/products/learn/course/course.component.scss\")).default]\n    })\n], CourseComponent);\n\n\n\n/***/ }),\n\n/***/ \"./src/app/products/learn/learn-routing.module.ts\":\n/*!********************************************************!*\\\n  !*** ./src/app/products/learn/learn-routing.module.ts ***!\n  \\********************************************************/\n/*! exports provided: LearnRoutingModule */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LearnRoutingModule\", function() { return LearnRoutingModule; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ \"./node_modules/@angular/router/fesm2015/router.js\");\n/* harmony import */ var _learn_learn_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./learn/learn.component */ \"./src/app/products/learn/learn/learn.component.ts\");\n/* harmony import */ var _course_course_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./course/course.component */ \"./src/app/products/learn/course/course.component.ts\");\n/* harmony import */ var _course_video_course_video_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./course-video/course-video.component */ \"./src/app/products/learn/course-video/course-video.component.ts\");\n\n\n\n\n\n\nconst routes = [\n    {\n        path: '',\n        component: _learn_learn_component__WEBPACK_IMPORTED_MODULE_3__[\"LearnComponent\"],\n        data: { title: 'learn' }\n    },\n    {\n        path: 'course',\n        component: _course_course_component__WEBPACK_IMPORTED_MODULE_4__[\"CourseComponent\"],\n        data: { title: 'course' }\n    },\n    {\n        path: 'course-video',\n        component: _course_video_course_video_component__WEBPACK_IMPORTED_MODULE_5__[\"CourseVideoComponent\"],\n        data: { title: 'course video' }\n    }\n];\nlet LearnRoutingModule = class LearnRoutingModule {\n};\nLearnRoutingModule = tslib__WEBPACK_IMPORTED_MODULE_0__[\"__decorate\"]([\n    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"NgModule\"])({\n        imports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__[\"RouterModule\"].forChild(routes)],\n        exports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__[\"RouterModule\"]]\n    })\n], LearnRoutingModule);\n\n\n\n/***/ }),\n\n/***/ \"./src/app/products/learn/learn.module.ts\":\n/*!************************************************!*\\\n  !*** ./src/app/products/learn/learn.module.ts ***!\n  \\************************************************/\n/*! exports provided: LearnModule */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LearnModule\", function() { return LearnModule; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ \"./node_modules/@angular/common/fesm2015/common.js\");\n/* harmony import */ var _shared_shared_module__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../shared/shared.module */ \"./src/app/shared/shared.module.ts\");\n/* harmony import */ var ngx_slick_carousel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ngx-slick-carousel */ \"./node_modules/ngx-slick-carousel/fesm2015/ngx-slick-carousel.js\");\n/* harmony import */ var _nicky_lenaers_ngx_scroll_to__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @nicky-lenaers/ngx-scroll-to */ \"./node_modules/@nicky-lenaers/ngx-scroll-to/fesm2015/nicky-lenaers-ngx-scroll-to.js\");\n/* harmony import */ var ngx_star_rating__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ngx-star-rating */ \"./node_modules/ngx-star-rating/fesm2015/ngx-star-rating.js\");\n/* harmony import */ var _learn_routing_module__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./learn-routing.module */ \"./src/app/products/learn/learn-routing.module.ts\");\n/* harmony import */ var _learn_learn_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./learn/learn.component */ \"./src/app/products/learn/learn/learn.component.ts\");\n/* harmony import */ var _course_course_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./course/course.component */ \"./src/app/products/learn/course/course.component.ts\");\n/* harmony import */ var _course_video_course_video_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./course-video/course-video.component */ \"./src/app/products/learn/course-video/course-video.component.ts\");\n/* harmony import */ var _course_video_overview_overview_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./course-video/overview/overview.component */ \"./src/app/products/learn/course-video/overview/overview.component.ts\");\n/* harmony import */ var _course_video_files_files_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./course-video/files/files.component */ \"./src/app/products/learn/course-video/files/files.component.ts\");\n/* harmony import */ var _course_video_chapters_chapters_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./course-video/chapters/chapters.component */ \"./src/app/products/learn/course-video/chapters/chapters.component.ts\");\n/* harmony import */ var _course_video_faq_faq_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./course-video/faq/faq.component */ \"./src/app/products/learn/course-video/faq/faq.component.ts\");\n/* harmony import */ var _course_video_feeds_feeds_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./course-video/feeds/feeds.component */ \"./src/app/products/learn/course-video/feeds/feeds.component.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlet LearnModule = class LearnModule {\n};\nLearnModule = tslib__WEBPACK_IMPORTED_MODULE_0__[\"__decorate\"]([\n    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"NgModule\"])({\n        declarations: [_learn_learn_component__WEBPACK_IMPORTED_MODULE_8__[\"LearnComponent\"], _course_course_component__WEBPACK_IMPORTED_MODULE_9__[\"CourseComponent\"], _course_video_course_video_component__WEBPACK_IMPORTED_MODULE_10__[\"CourseVideoComponent\"], _course_video_overview_overview_component__WEBPACK_IMPORTED_MODULE_11__[\"OverviewComponent\"], _course_video_files_files_component__WEBPACK_IMPORTED_MODULE_12__[\"FilesComponent\"], _course_video_chapters_chapters_component__WEBPACK_IMPORTED_MODULE_13__[\"ChaptersComponent\"], _course_video_faq_faq_component__WEBPACK_IMPORTED_MODULE_14__[\"FaqComponent\"], _course_video_feeds_feeds_component__WEBPACK_IMPORTED_MODULE_15__[\"FeedsComponent\"]],\n        imports: [\n            _angular_common__WEBPACK_IMPORTED_MODULE_2__[\"CommonModule\"],\n            _shared_shared_module__WEBPACK_IMPORTED_MODULE_3__[\"SharedModule\"],\n            _learn_routing_module__WEBPACK_IMPORTED_MODULE_7__[\"LearnRoutingModule\"],\n            ngx_slick_carousel__WEBPACK_IMPORTED_MODULE_4__[\"SlickCarouselModule\"],\n            _nicky_lenaers_ngx_scroll_to__WEBPACK_IMPORTED_MODULE_5__[\"ScrollToModule\"].forRoot(),\n            ngx_star_rating__WEBPACK_IMPORTED_MODULE_6__[\"NgxStarRatingModule\"]\n        ]\n    })\n], LearnModule);\n\n\n\n/***/ }),\n\n/***/ \"./src/app/products/learn/learn/learn.component.scss\":\n/*!***********************************************************!*\\\n  !*** ./src/app/products/learn/learn/learn.component.scss ***!\n  \\***********************************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"/* Theme for the ripple elements.*/\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\nbody {\\n  font-family: \\\"Source Sans Pro\\\", sans-serif;\\n}\\nh1 {\\n  text-align: center;\\n  font-size: 3em;\\n  text-transform: uppercase;\\n}\\n.padding-right {\\n  padding-right: 40px;\\n}\\n.padding-left {\\n  padding-left: 40px;\\n}\\n.margin-bottom-50 {\\n  margin-bottom: 50px;\\n}\\n.margin-top-50 {\\n  margin-bottom: 50px;\\n}\\n.background {\\n  padding: 30px 0;\\n  position: relative;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  align-self: center;\\n}\\n.background::before {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  bottom: 0;\\n  right: 0;\\n  opacity: 0.7;\\n  content: \\\"\\\";\\n  z-index: 0;\\n  background-image: linear-gradient(180deg, rgba(8, 8, 8, 0) 0%, #080808 100%), url('banner.png');\\n  max-height: 625px;\\n  background-size: cover;\\n}\\n.background .container {\\n  position: relative;\\n}\\n.background .shaale-live-banner-content {\\n  padding: 100px 0 50px 0;\\n  height: calc(100vh - 60px);\\n}\\n.background .shaale-live-banner-content h3 {\\n  font-weight: 600;\\n  font-size: 48px;\\n  letter-spacing: -0.05px;\\n  text-align: center;\\n}\\n.shaale-live-content {\\n  padding-bottom: 100px;\\n}\\n.shaale-live-content-section {\\n  padding: 50px 0 0 0;\\n}\\n.shaale-live-content-section .heading-v1 {\\n  font-size: 48px;\\n  letter-spacing: -0.05px;\\n  font-weight: 700;\\n  margin-bottom: 30px;\\n  text-align: left;\\n  text-transform: capitalize;\\n}\\n.pricing-services-section {\\n  padding: 100px 0;\\n}\\n.pricing-services-section h2 {\\n  font-size: 48px;\\n  letter-spacing: -0.05px;\\n  text-align: center;\\n  font-weight: 600;\\n}\\n.pricing-services-section .features {\\n  text-align: center;\\n}\\n.pricing-services-section .features img {\\n  height: 90px;\\n  margin-bottom: 40px;\\n}\\n.pricing-services-section .features p {\\n  font-size: 16px;\\n  letter-spacing: -0.02px;\\n  text-align: center;\\n  font-weight: 300;\\n}\\n@media (max-width: 768px) {\\n  .padding-right {\\n    padding-right: 15px;\\n  }\\n\\n  .padding-left {\\n    padding-left: 15px;\\n  }\\n}\\n@media (max-width: 576px) {\\n  .padding-right {\\n    padding-right: 15px;\\n  }\\n\\n  .padding-left {\\n    padding-left: 15px;\\n  }\\n\\n  .background {\\n    padding: 40px 0 0 0;\\n  }\\n  .background h1 {\\n    line-height: 1em;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;base64, */\");\n\n/***/ }),\n\n/***/ \"./src/app/products/learn/learn/learn.component.ts\":\n/*!*********************************************************!*\\\n  !*** ./src/app/products/learn/learn/learn.component.ts ***!\n  \\*********************************************************/\n/*! exports provided: LearnComponent */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LearnComponent\", function() { return LearnComponent; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm2015/core.js\");\n/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ \"./node_modules/@angular/router/fesm2015/router.js\");\n\n\n\nlet LearnComponent = class LearnComponent {\n    constructor(router) {\n        this.router = router;\n        this.videos = [\n            {\n                img: 'assets/img/organisation/video-poster-1.jpg',\n                name: 'Rationalist s dramas and comedies of social suffering ',\n                description: 'GIPA'\n            },\n            {\n                img: 'assets/img/organisation/video-poster-2.jpg',\n                name: 'naraharikaviya torave ramayanada reading- definition program',\n                description: 'GIPA'\n            },\n            {\n                img: 'assets/img/organisation/video-poster-3.jpg',\n                name: 'd. V. G. Literary Awakening - Dr. R. Ganesh',\n                description: 'GIPA'\n            },\n            {\n                img: 'assets/img/organisation/video-poster-2.jpg',\n                name: 'naraharikaviya torave ramayanada reading- definition program',\n                description: 'GIPA'\n            },\n            {\n                img: 'assets/img/organisation/video-poster-3.jpg',\n                name: 'd. V. G. Literary Awakening - Dr. R. Ganesh',\n                description: 'GIPA'\n            },\n            {\n                img: 'assets/img/live/rectangle.png',\n                name: 'd. V. G. Literary Awakening - Dr. R. Ganesh',\n                description: 'GIPA'\n            }\n        ];\n        this.sliderBanner = [\n            {\n                img: 'https://firebasestorage.googleapis.com/v0/b/shaale-website.appspot.com/o/slider%2FWeb%20Cover.jpg?alt=media&token=fe793cec-8bae-4b9b-83be-2d4d4456768f',\n                title: 'BGU'\n            },\n            {\n                img: 'https://firebasestorage.googleapis.com/v0/b/shaale-website.appspot.com/o/slider%2FBG.jpg?alt=media&token=0582ba21-340c-4b60-a6a0-8062e32b24a4',\n                title: 'GIPA'\n            },\n            {\n                img: 'https://firebasestorage.googleapis.com/v0/b/shaale-website.appspot.com/o/slider%2FWeb%20Cover.jpg?alt=media&token=fe793cec-8bae-4b9b-83be-2d4d4456768f',\n                title: 'GIPA V2'\n            }\n        ];\n        this.bannerSliderConfig = {\n            slidesToShow: 1,\n            slidesToScroll: 1,\n            dots: false,\n            infinite: true,\n            dragScroll: false,\n            swipe: false,\n            nav: false,\n            autoplay: true,\n            autoplaySpeed: 5000,\n            nextArrow: false,\n            prevArrow: false,\n            loop: true,\n            lazyLoad: \"progressive\",\n            fade: true,\n        };\n        this.videoSlideConfig = {\n            slidesToShow: 3,\n            slidesToScroll: 3,\n            nextArrow: '<div class=\"nav-btn next-slide\"><img src=\"assets/img/icons/right-arrow-icon.png\"></div>',\n            prevArrow: '<div class=\"nav-btn prev-slide\"><img src=\"assets/img/icons/left-arrow-icon.png\"></div>',\n            dots: false,\n            infinite: false,\n            dragScroll: true,\n            responsive: [\n                {\n                    breakpoint: 1024,\n                    settings: {\n                        slidesToShow: 2,\n                        slidesToScroll: 2\n                    }\n                },\n                {\n                    breakpoint: 991,\n                    settings: {\n                        slidesToShow: 2,\n                        slidesToScroll: 2\n                    }\n                },\n                {\n                    breakpoint: 768,\n                    settings: {\n                        slidesToShow: 2,\n                        slidesToScroll: 2\n                    }\n                },\n                {\n                    breakpoint: 480,\n                    settings: {\n                        slidesToShow: 1,\n                        slidesToScroll: 1\n                    }\n                }\n            ]\n        };\n        this.carouselOptions = {\n            margin: 0,\n            nav: false,\n            navText: [\"<div class='nav-btn prev-slide'></div>\", \"<div class='nav-btn next-slide'></div>\"],\n            responsiveClass: true,\n            items: 1,\n            dots: false,\n            autoplay: true\n        };\n        this.images = [\n            {\n                text: \"Everfresh Flowers\",\n                image: \"https://freakyjolly.com/demo/jquery/PreloadJS/images/1.jpg\"\n            },\n            {\n                text: \"Festive Deer\",\n                image: \"https://freakyjolly.com/demo/jquery/PreloadJS/images/2.jpg\"\n            },\n            {\n                text: \"Morning Greens\",\n                image: \"https://freakyjolly.com/demo/jquery/PreloadJS/images/3.jpg\"\n            },\n            {\n                text: \"Bunch of Love\",\n                image: \"https://freakyjolly.com/demo/jquery/PreloadJS/images/4.jpg\"\n            },\n            {\n                text: \"Blue Clear\",\n                image: \"https://freakyjolly.com/demo/jquery/PreloadJS/images/5.jpg\"\n            },\n            {\n                text: \"Evening Clouds\",\n                image: \"https://freakyjolly.com/demo/jquery/PreloadJS/images/7.jpg\"\n            },\n            {\n                text: \"Fontains in Shadows\",\n                image: \"https://freakyjolly.com/demo/jquery/PreloadJS/images/8.jpg\"\n            },\n            {\n                text: \"Kites in the Sky\",\n                image: \"https://freakyjolly.com/demo/jquery/PreloadJS/images/9.jpg\"\n            },\n            {\n                text: \"Sun Streak\",\n                image: \"https://freakyjolly.com/demo/jquery/PreloadJS/images/10.jpg\"\n            }\n        ];\n    }\n    slickInit(e) {\n        console.log('slick initialized');\n    }\n    selectEvent(data) {\n        console.log(data);\n        // let heroId = data ? data : null;\n        // Pass along the hero id if available\n        // so that the HeroList component can select that hero.\n        // Include a junk 'foo' property for fun.\n        this.router.navigate(['learn/course']);\n    }\n    changeSlide(index) {\n        this.slickModal.slickGoTo(index);\n    }\n    ngOnInit() { }\n};\nLearnComponent.ctorParameters = () => [\n    { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__[\"Router\"] }\n];\ntslib__WEBPACK_IMPORTED_MODULE_0__[\"__decorate\"]([\n    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ViewChild\"])(\"slickModal\", { static: true })\n], LearnComponent.prototype, \"slickModal\", void 0);\nLearnComponent = tslib__WEBPACK_IMPORTED_MODULE_0__[\"__decorate\"]([\n    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__[\"Component\"])({\n        selector: 'shaale-learn',\n        template: tslib__WEBPACK_IMPORTED_MODULE_0__[\"__importDefault\"](__webpack_require__(/*! raw-loader!./learn.component.html */ \"./node_modules/raw-loader/dist/cjs.js!./src/app/products/learn/learn/learn.component.html\")).default,\n        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__[\"ChangeDetectionStrategy\"].OnPush,\n        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__[\"__importDefault\"](__webpack_require__(/*! ./learn.component.scss */ \"./src/app/products/learn/learn/learn.component.scss\")).default]\n    })\n], LearnComponent);\n\n\n\n/***/ })\n\n}]);\n//# sourceMappingURL=learn-learn-module-es2015.js.map","import { Injectable, ɵɵdefineInjectable, Component, forwardRef, Input, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxStarRatingService {\r\n    constructor() { }\r\n}\r\nNgxStarRatingService.decorators = [\r\n    { type: Injectable, args: [{\r\n                providedIn: 'root'\r\n            },] }\r\n];\r\n/** @nocollapse */\r\nNgxStarRatingService.ctorParameters = () => [];\r\n/** @nocollapse */ NgxStarRatingService.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgxStarRatingService_Factory() { return new NgxStarRatingService(); }, token: NgxStarRatingService, providedIn: \"root\" });\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxStarRatingComponent {\r\n    constructor() {\r\n        this.stars = [5, 4, 3, 2, 1];\r\n        this.propagateChange = (/**\r\n         * @param {?} _\r\n         * @return {?}\r\n         */\r\n        (_) => { });\r\n        if (!this.disabled) {\r\n            this.disabled = false;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() { }\r\n    /**\r\n     * @param {?} rate\r\n     * @return {?}\r\n     */\r\n    rate(rate) {\r\n        if (!this.disabled) {\r\n            this.propagateChange(rate);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    writeValue(value) {\r\n        this.value = value;\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) {\r\n        this.propagateChange = fn;\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) { }\r\n}\r\nNgxStarRatingComponent.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'ngx-star-rating',\r\n                template: \"<form action=\\\"\\\">\\n  <ng-template ngFor let-star [ngForOf]=\\\"stars\\\" let-currentElementIndex=\\\"(index + 1)\\\">\\n    <input class=\\\"star star-{{ star }}\\\" id=\\\"star-{{ star }}-{{ id }}\\\" type=\\\"radio\\\" name=\\\"star\\\" (click)=\\\"rate(star)\\\"\\n      [checked]=\\\"value == star\\\" [disabled]=\\\"disabled\\\" />\\n    <label class=\\\"star star-{{ star }}\\\" for=\\\"star-{{ star }}-{{ id }}\\\"></label>\\n  </ng-template>\\n</form>\\n\",\r\n                providers: [\r\n                    {\r\n                        provide: NG_VALUE_ACCESSOR,\r\n                        useExisting: forwardRef((/**\r\n                         * @return {?}\r\n                         */\r\n                        () => NgxStarRatingComponent)),\r\n                        multi: true,\r\n                    }\r\n                ],\r\n                styles: [\"@charset \\\"UTF-8\\\";*{margin:0;padding:0;font-family:roboto}body{background:#000}.cont{width:93%;max-width:350px;text-align:center;margin:4% auto;padding:30px 0;background:#111;color:#eee;border-radius:5px;border:thin solid #444;overflow:hidden}hr{margin:20px;border:none;border-bottom:thin solid rgba(255,255,255,.1)}div.title{font-size:2em}h1 span{font-weight:300;color:#fd4}div.stars{width:270px;display:inline-block}input.star{display:none}label.star{float:right;padding:10px;font-size:36px;color:#444;transition:.2s}input.star:checked~label.star:before{content:\\\"\\uF005\\\";color:#fd4;transition:.25s}input.star-5:checked~label.star:before{color:#fe7;text-shadow:0 0 20px #952}input.star-1:checked~label.star:before{color:#f62}label.star:hover{-webkit-transform:rotate(-15deg) scale(1.3);transform:rotate(-15deg) scale(1.3)}label.star:before{content:\\\"\\uF006\\\";font-family:FontAwesome}\"]\r\n            }] }\r\n];\r\n/** @nocollapse */\r\nNgxStarRatingComponent.ctorParameters = () => [];\r\nNgxStarRatingComponent.propDecorators = {\r\n    id: [{ type: Input }],\r\n    disabled: [{ type: Input }]\r\n};\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxStarRatingModule {\r\n}\r\nNgxStarRatingModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                declarations: [NgxStarRatingComponent],\r\n                imports: [\r\n                    CommonModule\r\n                ],\r\n                exports: [NgxStarRatingComponent]\r\n            },] }\r\n];\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { NgxStarRatingComponent, NgxStarRatingModule, NgxStarRatingService };\n//# sourceMappingURL=ngx-star-rating.js.map\n","export default \"<p>chapters works!</p>\\n\"","export default \"<p>course-video works!</p>\\n\"","export default \"<p>faq works!</p>\\n\"","export default \"<p>feeds works!</p>\\n\"","export default \"<p>files works!</p>\\n\"","export default \"<p>overview works!</p>\\n\"","export default \"<div class=\\\"course-banner-background\\\" style=\\\"background-image: url('assets/img/live/event-banner.jpg');\\\">\\n    <div class=\\\"container\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-lg-6\\\">\\n                <div class=\\\"course-banner-content\\\">\\n                    <h1>Jayadeva’s Gitagovindam</h1>\\n                    <p>Nam dapibus nisl vitae elit fringilla rutrum. Aenean sollicitudin, erat a elementum rutrum, neque\\n                        sem pretium metus, quis mollis nisl nunc et massa.</p>\\n                    <ul class=\\\"course-info\\\">\\n                        <li>\\n                            <p>Authors</p>\\n                            <div class=\\\"authors\\\">\\n                                <img src=\\\"assets/img/organisation/shatavadani-ganesh.jpg\\\">\\n                            </div>\\n                            <div class=\\\"authors\\\">\\n                                <img src=\\\"assets/img/organisation/v-ranganathrav.jpg\\\">\\n                            </div>\\n                            <div class=\\\"authors\\\">\\n                                <img src=\\\"assets/img/organisation/shatavadani-ganesh.jpg\\\">\\n                            </div>\\n                        </li>\\n                        <li>\\n                            <button mat-raised-button class=\\\"shaale-red purchase-button\\\">Buy Access</button>\\n                        </li>\\n                    </ul>\\n                </div>\\n            </div>\\n            <div class=\\\"col-lg-6\\\">\\n                <div class=\\\"course-play-icon\\\">\\n                    <button mat-icon-button routerLink=\\\"/live/video\\\">\\n                        <img src=\\\"./assets/img/icons/event-play-button.png\\\" alt=\\\"Play video\\\" />\\n                    </button>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <a [ngx-scroll-to]=\\\"'#courseList'\\\" class=\\\"mouse-hover\\\">\\n        <div class=\\\"mouse\\\"></div>\\n    </a>\\n</div>\\n<section class=\\\"about-course\\\">\\n    <div class=\\\"container\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-lg-12\\\">\\n                <ul class=\\\"about-course-list\\\">\\n                    <li>\\n                        <mat-icon>signal_cellular_alt</mat-icon> Beginner\\n                    </li>\\n                    <li>\\n                        <mat-icon>hourglass_full</mat-icon> 32h 18m\\n                    </li>\\n                    <li>\\n                        <mat-icon>chat</mat-icon> English Medium\\n                    </li>\\n                    <li>\\n                        <mat-icon>update</mat-icon> Last updated on September 19, 2017\\n                    </li>\\n                </ul>\\n            </div>\\n        </div>\\n    </div>\\n</section>\\n\\n<div class=\\\"\\\" id=\\\"courseList\\\" #courseListRef>\\n\\n    <section class=\\\"course-details-section\\\">\\n        <div class=\\\"container\\\">\\n\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-md-8\\\">\\n\\n                    <div class=\\\"course-details-column\\\">\\n\\n\\n                        <div class=\\\"chapter-tree\\\">\\n                            <h2>Chapter</h2>\\n                            <mat-tree [dataSource]=\\\"dataSource\\\" [treeControl]=\\\"treeControl\\\" class=\\\"example-tree\\\">\\n                                <!-- This is the tree node template for leaf nodes -->\\n                                <mat-tree-node *matTreeNodeDef=\\\"let node; index\\\" matTreeNodeToggle>\\n                                    <li class=\\\"mat-tree-node\\\">\\n                                        <!-- use a disabled button to provide padding for tree leaf -->\\n                                        <button mat-icon-button>\\n                                            <mat-icon class=\\\"mat-icon-rtl-mirror\\\">\\n                                                {{treeControl.isExpanded(node) ? 'pause' : 'play_arrow'}}\\n                                            </mat-icon>\\n                                        </button>\\n                                        {{index}} {{node.name}}\\n                                    </li>\\n                                </mat-tree-node>\\n                                <!-- This is the tree node template for expandable nodes -->\\n                                <mat-nested-tree-node *matTreeNodeDef=\\\"let node; when: hasChild\\\">\\n                                    <li>\\n                                        <div class=\\\"mat-tree-node\\\">\\n                                            <button mat-icon-button matTreeNodeToggle\\n                                                [attr.aria-label]=\\\"'toggle ' + node.name\\\">\\n                                                <mat-icon class=\\\"mat-icon-rtl-mirror\\\">\\n                                                    {{treeControl.isExpanded(node) ? 'remove' : 'add'}}\\n                                                </mat-icon>\\n                                            </button>\\n                                            {{node.name}} {{i}}\\n                                        </div>\\n                                        <ul [class.example-tree-invisible]=\\\"!treeControl.isExpanded(node)\\\">\\n                                            <ng-container matTreeNodeOutlet></ng-container>\\n                                        </ul>\\n                                    </li>\\n                                </mat-nested-tree-node>\\n                            </mat-tree>\\n                        </div>\\n                        <div class=\\\"course-description-outer\\\">\\n                            <div class=\\\"course-description\\\" [class.show]=\\\"show\\\">\\n                                <h2>Description</h2>\\n                                <p>This course is a comprehensive exploration of the aesthetics and music of Jayadeva's\\n                                    Gītagovinda, a poetical and musical\\n                                    work composed in the twelfth century. It has three components to enhance your\\n                                    experience of\\n                                    this marvellous work of art:\\n                                    a literary introduction, bhāvābhinaya or the performative aspect, and musical\\n                                    training.</p>\\n\\n                                <p>Prerequisites - None. A background in classical music and dance may be useful to\\n                                    appreciate\\n                                    the nuances of the course\\n                                    (And to perform), but is not necessary to enjoy the course.</p>\\n\\n                                <p>Composed by Jayadeva, a court poet of Lakshmanasena of Bengal (1185 - 1205 AD) is\\n                                    Poetry, par\\n                                    excellence - Divided into\\n                                    12 cantos bearing in all, a priceless set of 24 Asthapadi Songs, each of which\\n                                    possesses\\n                                    about 8 couplets.</p>\\n                            </div>\\n                            <div class=\\\"load-more-style-2\\\">\\n                                <div class=\\\"row\\\">\\n                                    <div class=\\\"col-md-12\\\">\\n                                        <button mat-button (click)=\\\"show = !show\\\">\\n                                            <fa-icon [icon]=\\\"['fa', 'angle-down']\\\"></fa-icon>\\n                                            <span>&nbsp; {{ show ? 'Show less': 'Show More' }} </span>\\n                                        </button>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n\\n                        <div class=\\\"course-includes\\\">\\n                            <h2>Course Includes</h2>\\n                            <ul>\\n                                <li>Over 32 hours of exclusive & exhaustive Full HD Video covering the entire\\n                                    Gitagovindam\\n                                </li>\\n                                <li>Musical training of all the 24 Ashtapadis with meaning & Bhavabhinaya</li>\\n                                <li>Downloadable learning material - Translation & Musical Notation (English)</li>\\n                            </ul>\\n                        </div>\\n\\n                        <div class=\\\"course-authors\\\">\\n                            <h2>Authors</h2>\\n                            <ul class=\\\"authors-info\\\">\\n                                <li>\\n                                    <div class=\\\"authors\\\">\\n                                        <img src=\\\"assets/img/organisation/shatavadani-ganesh.jpg\\\">\\n                                    </div>\\n                                    <div class=\\\"authors\\\">\\n                                        <img src=\\\"assets/img/organisation/v-ranganathrav.jpg\\\">\\n                                    </div>\\n                                    <div class=\\\"authors\\\">\\n                                        <img src=\\\"assets/img/organisation/shatavadani-ganesh.jpg\\\">\\n                                    </div>\\n                                </li>\\n                            </ul>\\n                        </div>\\n\\n                    </div>\\n\\n                </div>\\n                <div class=\\\"col-md-4\\\">\\n                    <div class=\\\"course-feeds-column\\\">\\n                        <h2>Feeds</h2>\\n                        <div class=\\\"course-feeds\\\">\\n                            <div class=\\\"demo-gallery feed-gallery\\\">\\n                                <ul id=\\\"feed-aniimated-thumbnials\\\">\\n                                    <li data-responsive=\\\"assets/img/organisation/gallery-1.jpg\\\"\\n                                        data-src=\\\"assets/img/organisation/gallery-1.jpg\\\"\\n                                        data-sub-html=\\\"<h4>Fading Light</h4><p>Classic view from Rigwood Jetty on Coniston Water an old archive shot similar to an old post but a little later on.</p>\\\">\\n                                        <a href=\\\"\\\">\\n                                            <img class=\\\"img-responsive\\\" src=\\\"assets/img/organisation/gallery-1.jpg\\\">\\n                                            <div class=\\\"demo-gallery-poster\\\">\\n                                                <img src=\\\"assets/img/icons/zoom.png\\\">\\n                                            </div>\\n                                        </a>\\n                                    </li>\\n                                    <li data-responsive=\\\"assets/img/organisation/gallery-2.jpg\\\"\\n                                        data-src=\\\"assets/img/organisation/gallery-2.jpg\\\"\\n                                        data-sub-html=\\\"<h4>Bowness Bay</h4><p>A beautiful Sunrise this morning taken En-route to Keswick not one as planned but I'm extremely happy I was passing the right place at the right time....</p>\\\">\\n                                        <a href=\\\"\\\">\\n                                            <img class=\\\"img-responsive\\\" src=\\\"assets/img/organisation/gallery-2.jpg\\\">\\n                                            <div class=\\\"demo-gallery-poster\\\">\\n                                                <img src=\\\"assets/img/icons/zoom.png\\\">\\n                                            </div>\\n                                        </a>\\n                                    </li>\\n                                </ul>\\n                            </div>\\n                        </div>\\n\\n                        <div class=\\\"course-feedback\\\">\\n                            <h2>Feedback</h2>\\n                            <div class=\\\"text-center\\\">\\n\\n                                <div class=\\\"course-overall-rating\\\">\\n                                    <div class=\\\"row justify-content-md-center align-items-start\\\">\\n                                        <div class=\\\"col col-lg-4\\\">\\n                                            <h1 class=\\\"rating-num\\\">4.0</h1>\\n                                            <div class=\\\"rating-stars\\\">\\n                                                <ngx-star-rating [(ngModel)]=\\\"rating3\\\" [disabled]=\\\"true\\\">\\n                                                </ngx-star-rating>\\n                                            </div>\\n                                        </div>\\n                                        <div class=\\\"col col-lg-8\\\">\\n                                            <div class=\\\"rating-bars\\\">\\n                                                <div class=\\\"bar\\\">\\n                                                    <div class=\\\"rating-number\\\">\\n                                                        <span class=\\\"num\\\">5</span>\\n                                                        <span class=\\\"fa fa-star\\\"></span>\\n                                                    </div>\\n                                                    <div class=\\\"bar-progress\\\">\\n                                                        <span class=\\\"rating-value\\\"></span>\\n                                                    </div>\\n                                                    <div class=\\\"total-users\\\">\\n                                                        <span>1800</span>\\n                                                    </div>\\n                                                </div>\\n                                                <div class=\\\"bar\\\">\\n                                                    <div class=\\\"rating-number\\\">\\n                                                        <span class=\\\"num\\\">4</span>\\n                                                        <span class=\\\"fa fa-star\\\"></span>\\n                                                    </div>\\n                                                    <div class=\\\"bar-progress\\\">\\n                                                        <span class=\\\"rating-value\\\"></span>\\n                                                    </div>\\n                                                    <div class=\\\"total-users\\\">\\n                                                        <span>1800</span>\\n                                                    </div>\\n                                                </div>\\n                                                <div class=\\\"bar\\\">\\n                                                    <div class=\\\"rating-number\\\">\\n                                                        <span class=\\\"num\\\">3</span>\\n                                                        <span class=\\\"fa fa-star\\\"></span>\\n                                                    </div>\\n                                                    <div class=\\\"bar-progress\\\">\\n                                                        <span class=\\\"rating-value\\\"></span>\\n                                                    </div>\\n                                                    <div class=\\\"total-users\\\">\\n                                                        <span>1800</span>\\n                                                    </div>\\n                                                </div>\\n                                                <div class=\\\"bar\\\">\\n                                                    <div class=\\\"rating-number\\\">\\n                                                        <span class=\\\"num\\\">2</span>\\n                                                        <span class=\\\"fa fa-star\\\"></span>\\n                                                    </div>\\n                                                    <div class=\\\"bar-progress\\\">\\n                                                        <span class=\\\"rating-value\\\"></span>\\n                                                    </div>\\n                                                    <div class=\\\"total-users\\\">\\n                                                        <span>1800</span>\\n                                                    </div>\\n                                                </div>\\n                                                <div class=\\\"bar\\\">\\n                                                    <div class=\\\"rating-number\\\">\\n                                                        <span class=\\\"num\\\">1</span>\\n                                                        <span class=\\\"fa fa-star\\\"></span>\\n                                                    </div>\\n                                                    <div class=\\\"bar-progress\\\">\\n                                                        <span class=\\\"rating-value\\\"></span>\\n                                                    </div>\\n                                                    <div class=\\\"total-users\\\">\\n                                                        <span>1800</span>\\n                                                    </div>\\n                                                </div>\\n                                            </div>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n\\n                                <div class=\\\"feedback-card\\\">\\n                                    <div class=\\\"user-feedback\\\">\\n                                        <h3 class=\\\"mt-2 mb-0\\\">Vikram jit Singh</h3>\\n                                        <div class=\\\"user-feedback-rating\\\">\\n                                            <p class=\\\"text-muted\\\">10 Sept</p>\\n                                        </div>\\n                                        <p class=\\\"content\\\">madam, your lessons helped me in re-visiting the basics\\n                                            and i will now proceed further into the learning of sanskrit ( deva\\n                                            basha ). Thanks a lot!</p>\\n                                    </div>\\n                                </div>\\n                            </div>\\n\\n                            <!-- <div class=\\\"course-overall-rating\\\">\\n                                <div class=\\\"\\\">\\n                                    <ngx-star-rating [(ngModel)]=\\\"rating3\\\" disabled></ngx-star-rating>\\n                                </div>\\n                                <div class=\\\"\\\">\\n                                    <div class=\\\"rating-graph\\\">\\n                                        <\\n                                    </div>\\n                                </div>\\n                            </div>\\n\\n                            <div class=\\\"cont\\\">\\n                                <div class=\\\"stars\\\">\\n                                    <ngx-star-rating [(ngModel)]=\\\"rating3\\\" [id]=\\\"'rating3'\\\"></ngx-star-rating>\\n                                </div>\\n                                <div>Rating: {{ rating3 }}</div>\\n                            </div> -->\\n                        </div>\\n                    </div>\\n\\n                </div>\\n            </div>\\n\\n        </div>\\n    </section>\\n\\n</div>\"","export default \"<div class=\\\"slider-banner\\\">\\n    <div class=\\\"slider-inner\\\">\\n        <div class=\\\"slider-container\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-lg-12\\\">\\n                    <ngx-slick-carousel class=\\\"carousel banner-slider\\\" #slickModal=\\\"slick-carousel\\\"\\n                        [config]=\\\"bannerSliderConfig\\\" (init)=\\\"slickInit($event)\\\">\\n\\n                        <div ngxSlickItem class=\\\"slide\\\" *ngFor=\\\"let banner of sliderBanner\\\">\\n                            <div class=\\\"banner-image-container\\\">\\n                                <img class=\\\"owl-lazy\\\" src=\\\"{{banner.img}}\\\" alt=\\\"\\\">\\n                                <div class=\\\"slider-caption\\\">\\n                                    <div class=\\\"container\\\">\\n                                        <div class=\\\"row\\\">\\n                                            <div class=\\\"col-sm-6\\\">\\n                                                <h1>{{banner.title}}</h1>\\n                                                <button mat-raised-button class=\\\"shaale-red\\\">Buy Access</button>\\n                                            </div>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </ngx-slick-carousel>\\n                    <div class=\\\"slide-content\\\">\\n                        <div class=\\\"slide-content-inner\\\">\\n                            <div class=\\\"container\\\">\\n                                <div class=\\\"row\\\">\\n                                    <div class=\\\"col-12\\\">\\n                                        <div class=\\\"slide-content-box\\\" (click)=\\\"changeSlide(0)\\\">\\n                                            <div class=\\\"progress-time\\\"></div>\\n                                            <p>Feel the dramatic and traditional costumes in distinctive stage\\n                                                practices.</p>\\n                                        </div>\\n                                        <div class=\\\"slide-content-box\\\" (click)=\\\"changeSlide(1)\\\">\\n                                            <div class=\\\"progress-time\\\"></div>\\n                                            <p>Feel the dramatic and traditional costumes in distinctive stage\\n                                                practices.</p>\\n                                        </div>\\n                                        <div class=\\\"slide-content-box\\\" (click)=\\\"changeSlide(2)\\\">\\n                                            <div class=\\\"progress-time\\\"></div>\\n                                            <p>Feel the dramatic and traditional costumes in distinctive stage\\n                                                practices.</p>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <a [ngx-scroll-to]=\\\"'#eventsList'\\\" class=\\\"mouse-hover\\\">\\n                        <div class=\\\"mouse\\\"></div>\\n                    </a>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\\n<!-- <owl-carousel [options]=\\\"carouselOptions\\\" [items]=\\\"images\\\"\\n    [carouselClasses]=\\\"['owl-theme', 'single-image-slider', 'sliding']\\\">\\n    <div class=\\\"item\\\" *ngFor=\\\"let image of images;let i= index\\\">\\n        <img class=\\\"slide-image\\\" src=\\\"{{image.image}}\\\">\\n        <div class=\\\"slide-text\\\">\\n            <h4>{{image.text}}</h4>\\n        </div>\\n    </div>\\n</owl-carousel> -->\\n\\n<div class=\\\"shaale-live-content\\\" id=\\\"eventsList\\\" #eventsListRef>\\n\\n    <section class=\\\"shaale-live-content-section\\\">\\n        <div class=\\\"container\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-lg-12\\\">\\n                    <h1 class=\\\"heading-v1\\\">Live Events</h1>\\n                    <ngx-slick-carousel class=\\\"carousel ngx-silck-slider\\\" #slickModal=\\\"slick-carousel\\\"\\n                        [config]=\\\"videoSlideConfig\\\" (init)=\\\"slickInit($event)\\\">\\n\\n                        <div ngxSlickItem class=\\\"slider-content-container slide\\\" *ngFor=\\\"let video of videos\\\"\\n                            (click)=\\\"selectEvent(video)\\\">\\n                            <div class=\\\"slider-image-container\\\">\\n                                <img class=\\\"owl-lazy\\\" src=\\\"{{video.img}}\\\" alt=\\\"\\\">\\n                            </div>\\n                        </div>\\n                    </ngx-slick-carousel>\\n                </div>\\n            </div>\\n        </div>\\n    </section>\\n\\n    <section class=\\\"shaale-live-content-section\\\">\\n        <div class=\\\"container\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-lg-12\\\">\\n                    <h1 class=\\\"heading-v1\\\">Upcoming Events</h1>\\n                    <ngx-slick-carousel class=\\\"carousel ngx-silck-slider\\\" #slickModal=\\\"slick-carousel\\\"\\n                        [config]=\\\"videoSlideConfig\\\" (init)=\\\"slickInit($event)\\\">\\n\\n                        <div ngxSlickItem class=\\\"slider-content-container slide\\\" *ngFor=\\\"let video of videos\\\">\\n                            <div class=\\\"slider-image-container\\\">\\n                                <img class=\\\"owl-lazy\\\" src=\\\"{{video.img}}\\\" alt=\\\"\\\">\\n                            </div>\\n                        </div>\\n                    </ngx-slick-carousel>\\n                </div>\\n            </div>\\n        </div>\\n    </section>\\n\\n    <section class=\\\"shaale-live-content-section\\\">\\n        <div class=\\\"container\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-lg-12\\\">\\n                    <h1 class=\\\"heading-v1\\\">Premium Events</h1>\\n                    <ngx-slick-carousel class=\\\"carousel ngx-silck-slider\\\" #slickModal=\\\"slick-carousel\\\"\\n                        [config]=\\\"videoSlideConfig\\\" (init)=\\\"slickInit($event)\\\">\\n\\n                        <div ngxSlickItem class=\\\"slider-content-container slide\\\" *ngFor=\\\"let video of videos\\\">\\n                            <div class=\\\"slider-image-container\\\">\\n                                <img class=\\\"owl-lazy\\\" src=\\\"{{video.img}}\\\" alt=\\\"\\\">\\n                            </div>\\n                        </div>\\n                    </ngx-slick-carousel>\\n                </div>\\n            </div>\\n        </div>\\n    </section>\\n\\n    <section class=\\\"shaale-live-content-section\\\">\\n        <div class=\\\"container\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-lg-12\\\">\\n                    <h1 class=\\\"heading-v1\\\">All Archive</h1>\\n                    <ngx-slick-carousel class=\\\"carousel ngx-silck-slider\\\" #slickModal=\\\"slick-carousel\\\"\\n                        [config]=\\\"videoSlideConfig\\\" (init)=\\\"slickInit($event)\\\">\\n\\n                        <div ngxSlickItem class=\\\"slider-content-container slide\\\" *ngFor=\\\"let video of videos\\\">\\n                            <div class=\\\"slider-image-container\\\">\\n                                <img class=\\\"owl-lazy\\\" src=\\\"{{video.img}}\\\" alt=\\\"\\\">\\n                            </div>\\n                        </div>\\n                    </ngx-slick-carousel>\\n                </div>\\n            </div>\\n        </div>\\n    </section>\\n\\n    <section class=\\\"shaale-live-content-section\\\">\\n        <div class=\\\"container\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-lg-12\\\">\\n                    <h1 class=\\\"heading-v1\\\">For You</h1>\\n                    <ngx-slick-carousel class=\\\"carousel ngx-silck-slider\\\" #slickModal=\\\"slick-carousel\\\"\\n                        [config]=\\\"videoSlideConfig\\\" (init)=\\\"slickInit($event)\\\">\\n\\n                        <div ngxSlickItem class=\\\"slider-content-container slide\\\" *ngFor=\\\"let video of videos\\\">\\n                            <div class=\\\"slider-image-container\\\">\\n                                <img class=\\\"owl-lazy\\\" src=\\\"{{video.img}}\\\" alt=\\\"\\\">\\n                            </div>\\n                        </div>\\n                    </ngx-slick-carousel>\\n                </div>\\n            </div>\\n        </div>\\n    </section>\\n\\n</div>\"","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Byb2R1Y3RzL2xlYXJuL2NvdXJzZS12aWRlby9jaGFwdGVycy9jaGFwdGVycy5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'shaale-chapters',\n  templateUrl: './chapters.component.html',\n  styleUrls: ['./chapters.component.scss']\n})\nexport class ChaptersComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Byb2R1Y3RzL2xlYXJuL2NvdXJzZS12aWRlby9jb3Vyc2UtdmlkZW8uY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'shaale-course-video',\n  templateUrl: './course-video.component.html',\n  styleUrls: ['./course-video.component.scss']\n})\nexport class CourseVideoComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Byb2R1Y3RzL2xlYXJuL2NvdXJzZS12aWRlby9mYXEvZmFxLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'shaale-faq',\n  templateUrl: './faq.component.html',\n  styleUrls: ['./faq.component.scss']\n})\nexport class FaqComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Byb2R1Y3RzL2xlYXJuL2NvdXJzZS12aWRlby9mZWVkcy9mZWVkcy5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'shaale-feeds',\n  templateUrl: './feeds.component.html',\n  styleUrls: ['./feeds.component.scss']\n})\nexport class FeedsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Byb2R1Y3RzL2xlYXJuL2NvdXJzZS12aWRlby9maWxlcy9maWxlcy5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'shaale-files',\n  templateUrl: './files.component.html',\n  styleUrls: ['./files.component.scss']\n})\nexport class FilesComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Byb2R1Y3RzL2xlYXJuL2NvdXJzZS12aWRlby9vdmVydmlldy9vdmVydmlldy5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'shaale-overview',\n  templateUrl: './overview.component.html',\n  styleUrls: ['./overview.component.scss']\n})\nexport class OverviewComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export default \"/* Theme for the ripple elements.*/\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\nbody {\\n  font-family: \\\"Source Sans Pro\\\", sans-serif;\\n}\\nh1 {\\n  text-align: center;\\n  font-size: 3em;\\n  text-transform: uppercase;\\n}\\n.padding-right {\\n  padding-right: 40px;\\n}\\n.padding-left {\\n  padding-left: 40px;\\n}\\n.margin-bottom-50 {\\n  margin-bottom: 50px;\\n}\\n.margin-top-50 {\\n  margin-bottom: 50px;\\n}\\n.course-banner-background {\\n  padding: 30px 0;\\n  position: relative;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  align-self: center;\\n  min-height: calc(100vh - 60px);\\n  background-repeat: no-repeat;\\n  background-size: cover;\\n  background-position: center center;\\n}\\n.course-banner-background:before {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  bottom: 0;\\n  right: 0;\\n  content: \\\"\\\";\\n  z-index: 0;\\n  height: 100%;\\n}\\n.course-banner-background .container {\\n  position: relative;\\n}\\n.course-banner-background .course-banner-content h1 {\\n  font-weight: 300;\\n  font-size: 36px;\\n  letter-spacing: 0.05px;\\n  text-align: left;\\n  margin-bottom: 20px;\\n}\\n.course-banner-background .course-banner-content p {\\n  font-size: 18px;\\n  color: #A2A4AB;\\n  letter-spacing: -0.02px;\\n}\\n.course-banner-background .course-banner-content .course-info {\\n  list-style-type: none;\\n  padding: 0;\\n  margin: 0;\\n}\\n.course-banner-background .course-banner-content .course-info li {\\n  display: block;\\n  margin-bottom: 20px;\\n}\\n.course-banner-background .course-banner-content .course-info li .authors {\\n  height: 60px;\\n  width: 60px;\\n  border-radius: 100%;\\n  overflow: hidden;\\n  display: inline-block;\\n  margin-right: 20px;\\n  margin-bottom: 20px;\\n}\\n.course-banner-background .course-banner-content .course-info li .authors img {\\n  max-width: 100%;\\n}\\n.course-banner-background .course-banner-content .course-info li .purchase-button {\\n  font-size: 16px;\\n  color: #FFFFFF;\\n  letter-spacing: 1px;\\n  font-weight: 300;\\n  text-transform: uppercase;\\n  width: 180px;\\n  height: 45px;\\n}\\n.course-banner-background .course-play-icon {\\n  display: flex;\\n  justify-content: center;\\n  vertical-align: middle;\\n  align-items: center;\\n  align-self: center;\\n  height: 100%;\\n  width: 100%;\\n}\\n.course-banner-background .course-play-icon button {\\n  height: 100px;\\n  width: 100px;\\n  border-radius: 100%;\\n  opacity: 0.5;\\n}\\n.course-banner-background .course-play-icon button img {\\n  max-width: 100%;\\n}\\n.about-course {\\n  width: 100%;\\n  min-height: 60px;\\n  background: #131415;\\n}\\n.about-course .about-course-list {\\n  margin: 0;\\n  padding: 0;\\n  list-style: none;\\n  display: flex;\\n  align-items: center;\\n  align-self: center;\\n  justify-content: flex-start;\\n  min-height: 60px;\\n}\\n.about-course .about-course-list li {\\n  display: flex;\\n  padding-right: 50px;\\n  justify-content: center;\\n  align-items: center;\\n  font-size: 18px;\\n  color: #A2A4AB;\\n  letter-spacing: -0.02px;\\n  text-align: left;\\n  line-height: 42px;\\n}\\n.about-course .about-course-list li mat-icon {\\n  margin-right: 5px;\\n}\\n.course-details-section {\\n  padding: 50px 0;\\n}\\n.course-details-section h2 {\\n  font-size: 32px;\\n  letter-spacing: -0.04px;\\n  font-weight: 600;\\n  margin-bottom: 30px;\\n  text-align: left;\\n}\\n.course-details-section .course-details-column {\\n  padding-right: 50px;\\n}\\n.course-details-section .course-details-column .course-description-outer {\\n  padding-bottom: 50px;\\n}\\n.course-details-section .course-details-column .course-description-outer .course-description {\\n  max-height: 400px;\\n  overflow: hidden;\\n  transition: all 0.3s;\\n}\\n.course-details-section .course-details-column .course-description-outer .course-description.show {\\n  overflow: visible;\\n  height: auto;\\n  max-height: auto;\\n  transition: height 0.3s;\\n}\\n.course-details-section .course-details-column .course-description-outer .course-description p {\\n  font-size: 18px;\\n  line-height: 24px;\\n  text-align: justify;\\n  color: #A2A4AB;\\n}\\n.course-details-section .course-details-column .course-includes {\\n  padding-bottom: 50px;\\n}\\n.course-details-section .course-details-column .course-includes ul {\\n  padding-left: 20px;\\n  margin: 0;\\n}\\n.course-details-section .course-details-column .course-includes ul li {\\n  font-size: 18px;\\n  color: #A2A4AB;\\n  letter-spacing: -0.02px;\\n  text-align: left;\\n  line-height: 27px;\\n  margin-bottom: 15px;\\n}\\n.course-details-section .course-details-column .course-authors {\\n  list-style-type: none;\\n  padding: 0;\\n  margin: 0;\\n  padding-bottom: 50px;\\n}\\n.course-details-section .course-details-column .course-authors ul {\\n  padding: 0;\\n  margin: 0;\\n}\\n.course-details-section .course-details-column .course-authors ul li {\\n  display: block;\\n  margin-bottom: 20px;\\n}\\n.course-details-section .course-details-column .course-authors ul li .authors {\\n  height: 100px;\\n  width: 100px;\\n  border-radius: 100%;\\n  overflow: hidden;\\n  display: inline-block;\\n  margin-right: 20px;\\n  margin-bottom: 20px;\\n}\\n.course-details-section .course-details-column .course-authors ul li .authors img {\\n  max-width: 100%;\\n}\\n.course-details-section .course-feeds-column .course-feeds {\\n  max-height: 400px;\\n  overflow-y: auto;\\n  transition: all 0.3s;\\n  padding-right: 15px;\\n  margin-bottom: 50px;\\n}\\n.course-details-section .course-feeds-column .course-feeds ul li {\\n  width: 100%;\\n  height: auto;\\n  margin-bottom: 20px;\\n}\\n.course-details-section .course-feeds-column .course-feeds ul li a img {\\n  max-width: 100%;\\n  height: auto;\\n}\\n.course-details-section .course-feeds-column .course-feeds .feed-img {\\n  max-width: 100%;\\n}\\n@media (max-width: 768px) {\\n  .padding-right {\\n    padding-right: 15px;\\n  }\\n\\n  .padding-left {\\n    padding-left: 15px;\\n  }\\n}\\n@media (max-width: 576px) {\\n  .padding-right {\\n    padding-right: 15px;\\n  }\\n\\n  .padding-left {\\n    padding-left: 15px;\\n  }\\n\\n  .background {\\n    padding: 40px 0 0 0;\\n  }\\n  .background h1 {\\n    line-height: 1em;\\n  }\\n}\\n.feedback-card {\\n  padding: 15px;\\n  border-radius: 3px;\\n  background: #131415;\\n}\\n.feedback-card .user-feedback h3 {\\n  font-size: 18px;\\n  color: #FFFFFF;\\n  text-align: left;\\n  font-weight: 600;\\n}\\n.feedback-card .user-feedback .user-feedback-rating {\\n  margin-bottom: 8px;\\n  width: 100%;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  align-self: center;\\n}\\n.feedback-card .user-feedback .user-feedback-rating p {\\n  font-weight: 300;\\n  font-size: 14px;\\n  color: #808080;\\n  text-align: right;\\n  margin: 0;\\n}\\n.feedback-card .user-feedback .content {\\n  font-size: 16px;\\n  color: #A2A4AB;\\n  letter-spacing: -0.02px;\\n  text-align: left;\\n  line-height: 21px;\\n  margin: 0;\\n}\\n.course-overall-rating .rating-num {\\n  font-weight: 300;\\n  font-size: 60px;\\n  color: #FFFFFF;\\n  text-align: left;\\n  margin-bottom: 10px;\\n}\\n.course-overall-rating .rating-stars label {\\n  font-size: 12px;\\n}\\n.rating-bars {\\n  width: 100%;\\n}\\n.rating-bars .bar {\\n  width: 100%;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  align-self: center;\\n  margin-bottom: 5px;\\n}\\n.rating-bars .bar .rating-number {\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  margin-right: 8px;\\n}\\n.rating-bars .bar .rating-number span {\\n  color: #808080;\\n  font-size: 13px;\\n  line-height: 18px;\\n  padding: 3px;\\n  margin-top: 0;\\n  margin-bottom: 0;\\n  display: block;\\n}\\n.rating-bars .bar .bar-progress {\\n  width: 100%;\\n  background: #ffffff;\\n  height: 8px;\\n  border-radius: 8px;\\n  overflow: hidden;\\n}\\n.rating-bars .bar .bar-progress .rating-value {\\n  width: 50%;\\n  height: 100%;\\n  display: block;\\n  background-color: #FFC60B;\\n}\\n.rating-bars .bar .total-users {\\n  margin-left: 8px;\\n}\\n.rating-bars .bar .total-users span {\\n  color: #808080;\\n  font-size: 13px;\\n  line-height: 18px;\\n  padding: 3px;\\n  margin-top: 0;\\n  margin-bottom: 0;\\n  display: block;\\n}\\n/*# sourceMappingURL=data:application/json;base64, */\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Router, ActivatedRoute, ParamMap } from '@angular/router';\nimport { NestedTreeControl } from '@angular/cdk/tree';\nimport { MatTreeNestedDataSource } from '@angular/material/tree';\n\nimport { SeoService } from '../../../shared/seo/seo.service';\ndeclare var lightGallery: any;\ndeclare var $: any;\n\n/**\n * Food data with nested structure.\n * Each node has a name and an optiona list of children.\n */\ninterface FoodNode {\n  name: string;\n  children?: FoodNode[];\n}\n\nconst TREE_DATA: FoodNode[] = [\n  {\n    name: 'Introduction',\n    children: [\n      { name: 'Apple' },\n      { name: 'Banana' },\n      { name: 'Fruit loops' },\n    ]\n  },\n  {\n    name: 'Ashtapadi - 1',\n    children: [\n      { name: 'Apple' },\n      { name: 'Banana' },\n      { name: 'Fruit loops' },\n    ]\n  },\n  {\n    name: 'Ashtapadi - 2',\n    children: [\n      { name: 'Apple' },\n      { name: 'Banana' },\n      { name: 'Fruit loops' },\n    ]\n  },\n  {\n    name: 'Ashtapadi - 3',\n    children: [\n      { name: 'Apple' },\n      { name: 'Banana' },\n      { name: 'Fruit loops' },\n    ]\n  },\n  {\n    name: 'Ashtapadi - 4',\n    children: [\n      { name: 'Apple' },\n      { name: 'Banana' },\n      { name: 'Fruit loops' },\n    ]\n  },\n  {\n    name: 'Ashtapadi - 5',\n    children: [\n      { name: 'Apple' },\n      { name: 'Banana' },\n      { name: 'Fruit loops' },\n    ]\n  },\n  {\n    name: 'Ashtapadi - 6',\n    children: [\n      { name: 'Apple' },\n      { name: 'Banana' },\n      { name: 'Fruit loops' },\n    ]\n  }\n];\n\n@Component({\n  selector: 'shaale-course',\n  templateUrl: './course.component.html',\n  styleUrls: ['./course.component.scss']\n})\nexport class CourseComponent implements OnInit {\n\n  treeControl = new NestedTreeControl<FoodNode>(node => node.children);\n  dataSource = new MatTreeNestedDataSource<FoodNode>();\n  show = false;\n  rating3: number;\n\n  constructor(\n    private router: Router,\n    private seo: SeoService,\n  ) {\n    this.dataSource.data = TREE_DATA;\n    this.rating3 = 5;\n  }\n\n  hasChild = (_: number, node: FoodNode) => !!node.children && node.children.length > 0;\n\n  videos = [\n    {\n      img: 'assets/img/organisation/video-poster-1.jpg',\n      name: 'Rationalist s dramas and comedies of social suffering ',\n      description: 'GIPA'\n    },\n    {\n      img: 'assets/img/organisation/video-poster-2.jpg',\n      name: 'naraharikaviya torave ramayanada reading- definition program',\n      description: 'GIPA'\n    },\n    {\n      img: 'assets/img/organisation/video-poster-3.jpg',\n      name: 'd. V. G. Literary Awakening - Dr. R. Ganesh',\n      description: 'GIPA'\n    },\n    {\n      img: 'assets/img/organisation/video-poster-2.jpg',\n      name: 'naraharikaviya torave ramayanada reading- definition program',\n      description: 'GIPA'\n    },\n    {\n      img: 'assets/img/organisation/video-poster-3.jpg',\n      name: 'd. V. G. Literary Awakening - Dr. R. Ganesh',\n      description: 'GIPA'\n    }\n  ];\n\n  videoSlideConfig = {\n    slidesToShow: 3,\n    slidesToScroll: 3,\n    nextArrow:\n      '<div class=\"nav-btn next-slide\"><img src=\"assets/img/icons/right-arrow-icon.png\"></div>',\n    prevArrow:\n      '<div class=\"nav-btn prev-slide\"><img src=\"assets/img/icons/left-arrow-icon.png\"></div>',\n    dots: false,\n    infinite: false,\n    dragScroll: true,\n    swipe: true,\n    touchMove: true,\n\n    responsive: [\n      {\n        breakpoint: 1024,\n        settings: {\n          slidesToShow: 2,\n          slidesToScroll: 2\n        }\n      },\n      {\n        breakpoint: 991,\n        settings: {\n          slidesToShow: 2,\n          slidesToScroll: 2\n        }\n      },\n      {\n        breakpoint: 768,\n        settings: {\n          slidesToShow: 2,\n          slidesToScroll: 2\n        }\n      },\n      {\n        breakpoint: 480,\n        settings: {\n          slidesToShow: 1,\n          slidesToScroll: 1\n        }\n      }\n    ]\n  };\n\n  slickInit(e) {\n    console.log('slick initialized');\n  }\n\n  selectEvent(data) {\n    console.log(data);\n    // let heroId = data ? data : null;\n    // Pass along the hero id if available\n    // so that the HeroList component can select that hero.\n    // Include a junk 'foo' property for fun.\n    // this.router.navigate(['live/event']);\n  }\n\n  ngOnInit() {\n    lightGallery(document.getElementById('lightgallery'));\n    lightGallery(document.getElementById('feed-aniimated-thumbnials'), {\n      thumbnail: true,\n      animateThumb: false,\n      showThumbByDefault: false\n    });\n\n    lightGallery(document.getElementById('video-gallery'));\n\n    this.seo.generateTags({\n      title: 'Amit',\n      description: 'Amit Dwivedi',\n      image: \"https://miro.medium.com/max/512/1*sXrpvkWUPm1K9zGKhI3MlA.png\",\n      slug: 'https://shaale.com/'\n    });\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LearnComponent } from './learn/learn.component';\nimport { CourseComponent } from './course/course.component';\nimport { CourseVideoComponent } from './course-video/course-video.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LearnComponent,\n    data: { title: 'learn' }\n  },\n  {\n    path: 'course',\n    component: CourseComponent,\n    data: { title: 'course' }\n  },\n  {\n    path: 'course-video',\n    component: CourseVideoComponent,\n    data: { title: 'course video' }\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class LearnRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../../shared/shared.module';\n\nimport { SlickCarouselModule } from 'ngx-slick-carousel';\nimport { ScrollToModule } from '@nicky-lenaers/ngx-scroll-to';\nimport { NgxStarRatingModule } from 'ngx-star-rating';\n\nimport { LearnRoutingModule } from './learn-routing.module';\nimport { LearnComponent } from './learn/learn.component';\nimport { CourseComponent } from './course/course.component';\nimport { CourseVideoComponent } from './course-video/course-video.component';\nimport { OverviewComponent } from './course-video/overview/overview.component';\nimport { FilesComponent } from './course-video/files/files.component';\nimport { ChaptersComponent } from './course-video/chapters/chapters.component';\nimport { FaqComponent } from './course-video/faq/faq.component';\nimport { FeedsComponent } from './course-video/feeds/feeds.component';\n\n@NgModule({\n  declarations: [LearnComponent, CourseComponent, CourseVideoComponent, OverviewComponent, FilesComponent, ChaptersComponent, FaqComponent, FeedsComponent],\n  imports: [\n    CommonModule,\n    SharedModule,\n    LearnRoutingModule,\n    SlickCarouselModule,\n    ScrollToModule.forRoot(),\n    NgxStarRatingModule\n  ]\n})\nexport class LearnModule { }\n","export default \"/* Theme for the ripple elements.*/\\n/* stylelint-disable material/no-prefixes */\\n/* stylelint-enable */\\nbody {\\n  font-family: \\\"Source Sans Pro\\\", sans-serif;\\n}\\nh1 {\\n  text-align: center;\\n  font-size: 3em;\\n  text-transform: uppercase;\\n}\\n.padding-right {\\n  padding-right: 40px;\\n}\\n.padding-left {\\n  padding-left: 40px;\\n}\\n.margin-bottom-50 {\\n  margin-bottom: 50px;\\n}\\n.margin-top-50 {\\n  margin-bottom: 50px;\\n}\\n.background {\\n  padding: 30px 0;\\n  position: relative;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  align-self: center;\\n}\\n.background::before {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  bottom: 0;\\n  right: 0;\\n  opacity: 0.7;\\n  content: \\\"\\\";\\n  z-index: 0;\\n  background-image: linear-gradient(180deg, rgba(8, 8, 8, 0) 0%, #080808 100%), url('banner.png');\\n  max-height: 625px;\\n  background-size: cover;\\n}\\n.background .container {\\n  position: relative;\\n}\\n.background .shaale-live-banner-content {\\n  padding: 100px 0 50px 0;\\n  height: calc(100vh - 60px);\\n}\\n.background .shaale-live-banner-content h3 {\\n  font-weight: 600;\\n  font-size: 48px;\\n  letter-spacing: -0.05px;\\n  text-align: center;\\n}\\n.shaale-live-content {\\n  padding-bottom: 100px;\\n}\\n.shaale-live-content-section {\\n  padding: 50px 0 0 0;\\n}\\n.shaale-live-content-section .heading-v1 {\\n  font-size: 48px;\\n  letter-spacing: -0.05px;\\n  font-weight: 700;\\n  margin-bottom: 30px;\\n  text-align: left;\\n  text-transform: capitalize;\\n}\\n.pricing-services-section {\\n  padding: 100px 0;\\n}\\n.pricing-services-section h2 {\\n  font-size: 48px;\\n  letter-spacing: -0.05px;\\n  text-align: center;\\n  font-weight: 600;\\n}\\n.pricing-services-section .features {\\n  text-align: center;\\n}\\n.pricing-services-section .features img {\\n  height: 90px;\\n  margin-bottom: 40px;\\n}\\n.pricing-services-section .features p {\\n  font-size: 16px;\\n  letter-spacing: -0.02px;\\n  text-align: center;\\n  font-weight: 300;\\n}\\n@media (max-width: 768px) {\\n  .padding-right {\\n    padding-right: 15px;\\n  }\\n\\n  .padding-left {\\n    padding-left: 15px;\\n  }\\n}\\n@media (max-width: 576px) {\\n  .padding-right {\\n    padding-right: 15px;\\n  }\\n\\n  .padding-left {\\n    padding-left: 15px;\\n  }\\n\\n  .background {\\n    padding: 40px 0 0 0;\\n  }\\n  .background h1 {\\n    line-height: 1em;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;base64, */\"","import { Component, OnInit, ChangeDetectionStrategy, ViewChild } from '@angular/core';\nimport { Router, ActivatedRoute, ParamMap } from '@angular/router';\nimport { SlickCarouselComponent } from \"ngx-slick-carousel\";\n\n@Component({\n  selector: 'shaale-learn',\n  templateUrl: './learn.component.html',\n  styleUrls: ['./learn.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LearnComponent implements OnInit {\n\n  @ViewChild(\"slickModal\", { static: true }) slickModal: SlickCarouselComponent;\n\n  constructor(private router: Router) { }\n\n  videos = [\n    {\n      img: 'assets/img/organisation/video-poster-1.jpg',\n      name: 'Rationalist s dramas and comedies of social suffering ',\n      description: 'GIPA'\n    },\n    {\n      img: 'assets/img/organisation/video-poster-2.jpg',\n      name: 'naraharikaviya torave ramayanada reading- definition program',\n      description: 'GIPA'\n    },\n    {\n      img: 'assets/img/organisation/video-poster-3.jpg',\n      name: 'd. V. G. Literary Awakening - Dr. R. Ganesh',\n      description: 'GIPA'\n    },\n    {\n      img: 'assets/img/organisation/video-poster-2.jpg',\n      name: 'naraharikaviya torave ramayanada reading- definition program',\n      description: 'GIPA'\n    },\n    {\n      img: 'assets/img/organisation/video-poster-3.jpg',\n      name: 'd. V. G. Literary Awakening - Dr. R. Ganesh',\n      description: 'GIPA'\n    },\n    {\n      img: 'assets/img/live/rectangle.png',\n      name: 'd. V. G. Literary Awakening - Dr. R. Ganesh',\n      description: 'GIPA'\n    }\n  ];\n\n  sliderBanner = [\n    {\n      img: 'https://firebasestorage.googleapis.com/v0/b/shaale-website.appspot.com/o/slider%2FWeb%20Cover.jpg?alt=media&token=fe793cec-8bae-4b9b-83be-2d4d4456768f',\n      title: 'BGU'\n    },\n    {\n      img: 'https://firebasestorage.googleapis.com/v0/b/shaale-website.appspot.com/o/slider%2FBG.jpg?alt=media&token=0582ba21-340c-4b60-a6a0-8062e32b24a4',\n      title: 'GIPA'\n    },\n    {\n      img: 'https://firebasestorage.googleapis.com/v0/b/shaale-website.appspot.com/o/slider%2FWeb%20Cover.jpg?alt=media&token=fe793cec-8bae-4b9b-83be-2d4d4456768f',\n      title: 'GIPA V2'\n    }\n  ];\n\n  bannerSliderConfig = {\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    dots: false,\n    infinite: true,\n    dragScroll: false,\n    swipe: false,\n    nav: false,\n    autoplay: true,\n    autoplaySpeed: 5000,\n    nextArrow: false,\n    prevArrow: false,\n    loop: true,\n    lazyLoad: \"progressive\",\n    fade: true,\n  }\n\n  videoSlideConfig = {\n    slidesToShow: 3,\n    slidesToScroll: 3,\n    nextArrow:\n      '<div class=\"nav-btn next-slide\"><img src=\"assets/img/icons/right-arrow-icon.png\"></div>',\n    prevArrow:\n      '<div class=\"nav-btn prev-slide\"><img src=\"assets/img/icons/left-arrow-icon.png\"></div>',\n    dots: false,\n    infinite: false,\n    dragScroll: true,\n\n    responsive: [\n      {\n        breakpoint: 1024,\n        settings: {\n          slidesToShow: 2,\n          slidesToScroll: 2\n        }\n      },\n      {\n        breakpoint: 991,\n        settings: {\n          slidesToShow: 2,\n          slidesToScroll: 2\n        }\n      },\n      {\n        breakpoint: 768,\n        settings: {\n          slidesToShow: 2,\n          slidesToScroll: 2\n        }\n      },\n      {\n        breakpoint: 480,\n        settings: {\n          slidesToShow: 1,\n          slidesToScroll: 1\n        }\n      }\n    ]\n  };\n\n  slickInit(e) {\n    console.log('slick initialized');\n  }\n\n  selectEvent(data) {\n    console.log(data);\n    // let heroId = data ? data : null;\n    // Pass along the hero id if available\n    // so that the HeroList component can select that hero.\n    // Include a junk 'foo' property for fun.\n    this.router.navigate(['learn/course']);\n  }\n\n  changeSlide(index) {\n    this.slickModal.slickGoTo(index);\n  }\n\n\n  carouselOptions = {\n    margin: 0,\n    nav: false,\n    navText: [\"<div class='nav-btn prev-slide'></div>\", \"<div class='nav-btn next-slide'></div>\"],\n    responsiveClass: true,\n    items: 1,\n    dots: false,\n    autoplay: true\n  }\n\n  images = [\n    {\n      text: \"Everfresh Flowers\",\n      image: \"https://freakyjolly.com/demo/jquery/PreloadJS/images/1.jpg\"\n    },\n    {\n      text: \"Festive Deer\",\n      image: \"https://freakyjolly.com/demo/jquery/PreloadJS/images/2.jpg\"\n    },\n    {\n      text: \"Morning Greens\",\n      image: \"https://freakyjolly.com/demo/jquery/PreloadJS/images/3.jpg\"\n    },\n    {\n      text: \"Bunch of Love\",\n      image: \"https://freakyjolly.com/demo/jquery/PreloadJS/images/4.jpg\"\n    },\n    {\n      text: \"Blue Clear\",\n      image: \"https://freakyjolly.com/demo/jquery/PreloadJS/images/5.jpg\"\n    },\n    {\n      text: \"Evening Clouds\",\n      image: \"https://freakyjolly.com/demo/jquery/PreloadJS/images/7.jpg\"\n    },\n    {\n      text: \"Fontains in Shadows\",\n      image: \"https://freakyjolly.com/demo/jquery/PreloadJS/images/8.jpg\"\n    },\n    {\n      text: \"Kites in the Sky\",\n      image: \"https://freakyjolly.com/demo/jquery/PreloadJS/images/9.jpg\"\n    },\n    {\n      text: \"Sun Streak\",\n      image: \"https://freakyjolly.com/demo/jquery/PreloadJS/images/10.jpg\"\n    }\n  ]\n\n\n  ngOnInit() { }\n}\n"]}