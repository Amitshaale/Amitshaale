{"version":3,"sources":["./src/app/shared/rest-api.service.ts"],"names":[],"mappings":"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","file":"common-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class RestApiService {\n\n  // Define API\n  apiURL = environment.apiUrl;\n  razorPayKey = environment.key;\n  razorPaySecretKey = environment.key_secret;\n\n  // localToken = JSON.parse(localStorage.getItem(\"token\"));\n\n\n  constructor(private http: HttpClient) { }\n\n  /*========================================\n    CRUD Methods for consuming RESTful API\n  =========================================*/\n\n  /* ===========\n   Auth API\n  ===================*/\n\n  // Http Options\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }\n\n  // HttpClient API for email signup\n  createUser(newUser) {\n    return this.http.post(this.apiURL + '/auth/signup/email', newUser, this.httpOptions)\n      .pipe(\n        retry(1),\n        // catchError(this.handleError)\n      )\n  }\n\n  // HttpClient API for email Login\n  loginUser(newUser) {\n    return this.http.post(this.apiURL + '/auth/login/email', newUser, this.httpOptions)\n      .pipe(\n        retry(1),\n        // catchError(this.handleError)\n      )\n  }\n\n  // HttpClient API for social login\n  loginUserSocial(socialUserDetails) {\n    return this.http.post(this.apiURL + '/auth/login/social/' + socialUserDetails.provider,\n      {\n        token: socialUserDetails.token\n      },\n      this.httpOptions\n    )\n      .pipe(\n        retry(1),\n        // catchError(this.handleError)\n      )\n  }\n\n  // HttpClient API for verify email\n  emailVerify(newUser) {\n    return this.http.post(this.apiURL + '/auth/verify/email', newUser, this.httpOptions)\n      .pipe(\n        retry(1),\n        // catchError(this.handleError)\n      )\n  }\n\n  // HttpClient API for verify mobile\n  verifyMobile(newUser) {\n    return this.http.post(this.apiURL + '/auth/verify/phone', newUser, this.httpOptions)\n      .pipe(\n        retry(1),\n        // catchError(this.handleError)\n      )\n  }\n\n  // HttpClient API for send mobile otp\n  sendOtp(newUser) {\n    return this.http.post(this.apiURL + '/auth/verify/send-otp', newUser, this.httpOptions)\n      .pipe(\n        retry(1),\n        // catchError(this.handleError)\n      )\n  }\n\n  // HttpClient API for send email verification\n  sendEmailVerification(newUser) {\n    return this.http.post(this.apiURL + '/auth/verify/send-otp', newUser, this.httpOptions)\n      .pipe(\n        retry(1),\n        // catchError(this.handleError)\n      )\n  }\n\n  updatePhone(updateUserDetails) {\n    return this.http.post(this.apiURL + '/auth/me', updateUserDetails, this.httpOptions)\n      .pipe(\n        retry(1),\n        // catchError(this.handleError)\n      )\n  }\n\n  updateIsValid(newUser) {\n    return this.http.put(this.apiURL + '/auth/me/sessions/watch/is-valid', newUser, this.httpOptions)\n      .pipe(\n        retry(1),\n        // catchError(this.handleError)\n      )\n  }\n\n  // HttpClient API for Forgot Password\n  forgotPassword(data) {\n    return this.http.get(this.apiURL + '/auth/me/forgot-password/' + data, this.httpOptions)\n    .pipe(\n      retry(1),\n      // catchError(this.handleError)\n    )\n  }\n\n  // HttpClient API for User details\n  getUserDetails() {\n    return this.http.get(this.apiURL + '/auth/me', this.httpOptions)\n      .pipe(\n        retry(1),\n        // catchError(this.handleError)\n      )\n  }\n\n  // HttpClient API for Sessions\n  getSessions() {\n    return this.http.get(this.apiURL + '/auth/me/sessions', this.httpOptions)\n      .pipe(\n        retry(1),\n        // catchError(this.handleError)\n      )\n  }\n\n  // HttpClient API for Sessions with id\n  getSessionsWIthID() {\n    return this.http.get(this.apiURL + '/auth/me/sessions/{sessionId}', this.httpOptions)\n      .pipe(\n        retry(1),\n        // catchError(this.handleError)\n      )\n  }\n\n  getIsValid() {\n    return this.http.get(this.apiURL + '/auth/me/sessions/watch/is-valid', this.httpOptions)\n      .pipe(\n        retry(1),\n        // catchError(this.handleError)\n      )\n  }\n\n\n\n  /* ===========\n  live API\n  ===================*/\n\n  getLiveEvents() {\n    return this.http.get(this.apiURL + '/live/events', this.httpOptions)\n      .pipe(\n        retry(1),\n        // catchError(this.handleError)\n      )\n  }\n\n  getLiveEventDetails(eventUrl) {\n    return this.http.get(this.apiURL + '/live/events/by-url/'+ eventUrl, this.httpOptions)\n      .pipe(\n        retry(1),\n        // catchError(this.handleError)\n      )\n  }\n\n  getLiveEventVideo() {\n    return this.http.get(this.apiURL + '/live/events/by-id/{eventID}/video', this.httpOptions)\n      .pipe(\n        retry(1),\n        // catchError(this.handleError)\n      )\n  }\n\n  getCouponCode() {\n    return this.http.get(this.apiURL + '/live/events/by-id/{eventID}/coupons/{couponCode}', this.httpOptions)\n      .pipe(\n        retry(1),\n        // catchError(this.handleError)\n      )\n  }\n\n  purchaseDetails(eventPurchaseData) {\n    return this.http.post(this.apiURL + '/live/events/by-id/'+eventPurchaseData.eventId+'/purchase', eventPurchaseData.orderId, this.httpOptions)\n      .pipe(\n        retry(1),\n        // catchError(this.handleError)\n      )\n  }\n  \n\n\n  \n\n\n\n  \n\n\n  // Error handling \n  // handleError(error) {\n  //   console.log(error);\n  //   let errorMessage = '';\n  //   if (error.error instanceof ErrorEvent) {\n  //     // Get client-side error\n  //     errorMessage = error.error.message;\n  //   } else {\n  //     // Get server-side error\n  //     errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n  //   }\n  //   window.alert(errorMessage);\n  //   return throwError(errorMessage);\n  // }\n\n}\n"],"sourceRoot":"webpack:///"}